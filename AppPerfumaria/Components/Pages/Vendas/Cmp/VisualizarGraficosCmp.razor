@using AppPerfumaria.Api.ReinoCompany
@using AppPerfumaria.Components.CmpsGerais
@using AppPerfumaria.Models.Auth
@using AppPerfumaria.Models.Tables
@using System.Globalization
@using ApexCharts

@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject ISnackbar Snack

<MudDialog ContentClass="bg-gray py-5" TitleClass="d-flex pb-0 pt-2">
    <TitleContent>
        <MudIconButton Icon="@Icons.Material.Filled.ChevronLeft"
        OnClick="(() => Voltar())" />
        <MudSpacer />
        <MudIcon Icon="@Icons.Material.Filled.InsertChartOutlined" Class="mt-3" />
    </TitleContent>
    <DialogContent>
        @if (_carregando)
        {
            <Loading AlignCenter="true" Color="MudBlazor.Color.Default" Size="MudBlazor.Size.Medium" />
        }
        else
        {
            <MudPaper Class="pa-2 mt-3" Elevation="0">
                <MudAlert Severity="Severity.Normal" Dense="true" NoIcon="true"
                ContentAlignment="HorizontalAlignment.Center" Class="fw-bold">
                    GRÁFICOS VENDAS
                </MudAlert>

                <MudGrid Spacing="2" Justify="Justify.Center" Class="mt-1">
                    <MudItem xs="6">
                        <MudSelect T="string" @bind-Value="_statusFiltro" Variant="Variant.Outlined"
                        Label="Status" Margin="Margin.Dense">
                            <MudSelectItem Value="@("Todos")" />
                            <MudSelectItem Value="@("Ativo")" />
                            <MudSelectItem Value="@("Inativo")" />
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="6">
                        <MudSelect T="int" @bind-Value="_formaPagamentoFiltro" Variant="Variant.Outlined"
                        Label="Forma de Pagamento" Margin="Margin.Dense">
                            <MudSelectItem Value="0">Todas</MudSelectItem>
                            @if (_listarFormasPagamentos != null)
                            {
                                @foreach (var formaPagamento in _listarFormasPagamentos)
                                {
                                    <MudSelectItem Value="@formaPagamento.id">
                                        @formaPagamento.nome
                                    </MudSelectItem>
                                }
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12">
                        <MudDateRangePicker Label="Período de Venda" @bind-DateRange="_criacaoFiltro"
                                            Variant="Variant.Outlined"
                                            PlaceholderStart="Data Início"
                                            PlaceholderEnd="Data Fim" Clearable="true"
                                            DateFormat="dd/MM/yyyy"
                                            Margin="Margin.Dense" />
                    </MudItem>
                    <MudItem xs="6">
                        <MudFab Label="Filtrar" Size="MudBlazor.Size.Small"
                                OnClick="ListarVendas" Class="mt-2 w-100" />
                    </MudItem>
                    <MudItem xs="6">

                    </MudItem>
                </MudGrid>
            </MudPaper>

            <MudPaper Class="pa-2 mt-3" Elevation="0">
                <ApexChart TItem="ChartModelo" @ref="_chartFormasPagamentos"
                Title="Formas de Pagamentos" Options="_optionsDonutFormasPagamentos">

                    <ApexPointSeries TItem="ChartModelo"
                    Items="_dadosFormasPagamentos"
                    SeriesType="SeriesType.Donut"
                    Name="Gross Value"
                    XValue="@(e => e.Nome)"
                    YAggregate="@(e => e.Sum(e => Convert.ToDecimal(e.Valor1)))"
                    OrderByDescending="e=>e.Y" />
                </ApexChart>
            </MudPaper>

            <MudPaper Class="pa-2 mt-3" Elevation="0">
                <ApexChart TItem="ChartModelo" Options="_optionsBarMarcas" 
                Title="Marcas" @ref="_chartMarcas">
                    <ApexPointSeries TItem="ChartModelo"
                    Items="_dadosMarcas"
                    Name="Investimento"
                    SeriesType="SeriesType.Bar"
                    XValue="@(e => e.Nome)"
                    YValue="e=> Convert.ToDecimal(e.Valor1)" 
                    ShowDataLabels />

                    <ApexPointSeries TItem="ChartModelo"
                    Items="_dadosMarcas"
                    Name="Lucratividade"
                    SeriesType="SeriesType.Bar"
                    XValue="@(e => e.Nome)"
                    YValue="e=> Convert.ToDecimal(e.Valor2)" 
                    ShowDataLabels />

                    <ApexPointSeries TItem="ChartModelo"
                    Items="_dadosMarcas"
                    Name="Taxas"
                    SeriesType="SeriesType.Bar"
                    XValue="@(e => e.Nome)"
                    YValue="e=> Convert.ToDecimal(e.Valor3)" 
                    ShowDataLabels />
                </ApexChart>
            </MudPaper>
        }
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter]
    private MudDialogInstance? _mudDialog { get; set; }
    public Auth? _auth;
    public Instalacoes? _instalacao;
    private List<Vendas>? _listarVendas = new List<Vendas>();
    private List<FormasPagamentos>? _listarFormasPagamentos;
    private bool _carregando = true;
    private bool _vendasInstalacao = true;
    private string? _statusFiltro = "Todos";
    private int _formaPagamentoFiltro = 0;
    public DateRange _criacaoFiltro = new DateRange(
       new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1),
       new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.DaysInMonth(DateTime.Now.Year, DateTime.Now.Month))
    );

    public class ChartModelo
    {
        public string? Nome { get; set; }
        public double? Valor1 { get; set; }
        public double? Valor2 { get; set; }
        public double? Valor3 { get; set; }
    }

    private ApexChart<ChartModelo>? _chartFormasPagamentos;
    private ApexChart<ChartModelo>? _chartMarcas;
    private List<ChartModelo>? _dadosFormasPagamentos { get; set; } = new();
    private List<ChartModelo>? _dadosMarcas { get; set; } = new();
    private ApexChartOptions<ChartModelo>? _optionsDonutFormasPagamentos = new();
    private ApexChartOptions<ChartModelo>? _optionsBarMarcas = new();

    protected override void OnInitialized()
    {
        _optionsDonutFormasPagamentos = new ApexChartOptions<ChartModelo>
            {
                PlotOptions = new PlotOptions
                {
                    Pie = new PlotOptionsPie
                    {
                        Donut = new PlotOptionsDonut
                        {
                            Labels = new DonutLabels
                            {
                                Total = new DonutLabelTotal {
                                    FontSize = "24px",
                                    Color = "#D807B8",
                                    Formatter = @"function (w) {
                                    let total = w.globals.seriesTotals.reduce((a, b) => a + b, 0);
                                    return total.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' }); }"
                                },
                                Value = new DonutLabelValue
                                {
                                    Show = true,
                                    Formatter = @"function (value) {
                                    return Number(value).toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' }); }"
                                },
                            }
                        }
                    }
                },
                Yaxis = new List<YAxis>
                {
                    new YAxis
                    {
                        Labels = new YAxisLabels
                        {
                            Formatter = @"function (value) {
                            return Number(value).toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' }); }"
                        }
                    }
                },
                Xaxis = new XAxis
                {
                    Labels = new XAxisLabels
                    {
                        Formatter = @"function (value) {
                        if (value === undefined) {return '';}
                        return value.toUpperCase();}"
                    }
                }
            };

        _optionsBarMarcas = new ApexChartOptions<ChartModelo>
            {
                Chart = new Chart
                {
                    Stacked = true,
                },
                PlotOptions = new PlotOptions
                {
                    Bar = new PlotOptionsBar
                    {
                        DataLabels = new PlotOptionsBarDataLabels
                        {
                            Total = new BarTotalDataLabels
                            {
                                Style = new BarDataLabelsStyle
                                {
                                    FontWeight = "800"
                                }
                            }
                        }
                    }
                },
                Colors = new List<string> { "#003399", "#5cb85c", "#d9534f" },
                DataLabels = new DataLabels
                {
                    Enabled = true,
                    Formatter = @"function (value) {
                    return Number(value).toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' }); }"
                },
                Yaxis = new List<YAxis>
                {
                    new YAxis
                    {
                        Labels = new YAxisLabels
                        {
                            Formatter = @"function (value) {
                            return Number(value).toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' }); }"
                        }
                    }
                },
            };
    }

    private string FormatarMoeda(double value)
    {
        return value.ToString("C", System.Globalization.CultureInfo.GetCultureInfo("pt-BR"));
    }


    protected override async Task OnInitializedAsync()
    {
        _auth = await LocalStorage.GetItemAsync<Auth>("auth");
        _instalacao = await LocalStorage.GetItemAsync<Instalacoes>("instalacao");
        await ListarVendas();
        await ListarFormasPagamentos();
    }

    private bool DisabitarDatas(DateTime date)
    {
        // Data mínima: 1º de janeiro/2025
        DateTime minData = new DateTime(2025, 1, 1);

        // Data máxima: Data atual
        DateTime maxData = DateTime.Now;

        // Desabilitar datas antes de 1º de janeiro/2025 ou depois da data atual
        return date < minData || date > maxData;
    }

    public string? PegarFiltros()
    {
        string filtros = $"?";

        if (_vendasInstalacao)
        {
            filtros += $"&instalacoes_id={_instalacao!.id}";
        }
        if (!string.IsNullOrEmpty(_statusFiltro) && _statusFiltro != "Todos")
        {
            filtros += $"&status={_statusFiltro}";
        }
        if (_formaPagamentoFiltro > 0)
        {
            filtros += $"&formas_pagamentos_id={_formaPagamentoFiltro}";
        }
        if (_criacaoFiltro.Start != null && _criacaoFiltro.End != null)
        {
            filtros += $"&criado_de={_criacaoFiltro.Start?.ToString("yyyy-MM-dd")}&criado_ate={_criacaoFiltro.End?.ToString("yyyy-MM-dd")}";
        }

        return filtros;
    }

    public async Task ListarFormasPagamentos()
    {
        try
        {
            string filtros = $"?instalacoes_id={_instalacao!.id}&por_pagina=20&status=Ativo";

            var reinoCompany = new ReinoCompany();
            var response = await reinoCompany.FormasPagamentosListar(_auth!.token!, filtros);

            if (response!.status)
            {
                _listarFormasPagamentos = response!.data!;
            }
            else
            {
                if (!string.IsNullOrEmpty(response.message))
                {
                    Snack.Add(response.message, Severity.Warning);
                }
            }

            StateHasChanged();
        }
        catch (Exception e)
        {
            Snack.Add("Tivemos um problema ao tentar listar as formas de pagamento!", Severity.Warning);
        }
    }

    public async Task ListarVendas()
    {
        try
        {
            _carregando = true;
            StateHasChanged();
            string? filtros = PegarFiltros();

            var reinoCompany = new ReinoCompany();
            var response = await reinoCompany.VendasListar(_auth!.token!, filtros);

            if (response!.status)
            {
                _listarVendas = response!.data!;
            }
            else
            {
                if (!string.IsNullOrEmpty(response.message))
                {
                    Snack.Add(response.message, Severity.Warning);
                }
            }

            _ = VendasPorFormaPagamento();
            _ = VendasPorMarcas();
            _carregando = false;
            StateHasChanged();
        }
        catch (Exception e)
        {
            Snack.Add("Tivemos um problema ao tentar listar as vendas!", Severity.Warning);
            _carregando = false;
        }
    } 

    private async Task VendasPorFormaPagamento()
    {
        _dadosFormasPagamentos = new List<ChartModelo>();

        var listarVendas = _listarVendas.GroupBy(p => p.forma_pagamento.nome)
                                 .Select(g => (Nome: g.Key, Valor: g.Sum(p => p.preco_total)))
                                 .OrderByDescending(o => o.Valor)
                                 .ToList();

        foreach (var item in listarVendas)
        {
            _dadosFormasPagamentos?.Add(new ChartModelo { Nome = item.Nome, Valor1 = item.Valor, Valor2 = null, Valor3 = null });
        }

        // await _chartFormasPagamentos.UpdateOptionsAsync(true, true, false);
    }

    private async Task VendasPorMarcas()
    {
        List<ChartModelo> dadosMarcas = new List<ChartModelo>();

        foreach (var venda in _listarVendas)
        {
            foreach (var vendaEstoque in venda.vendas_estoques)
            {
                string marca = vendaEstoque.estoque.produto.marca.nome;
                double? valorCompra = 0;
                double? valorVenda = 0;
                double? valorLucro = 0;
                double? valorTaxa = null;
                double? taxa = 0;

                valorCompra = vendaEstoque.estoque.preco_compra_original;
                if (vendaEstoque.estoque.preco_compra_desconto != null)
                {
                    valorCompra = vendaEstoque.estoque.preco_compra_desconto;
                }

                valorVenda = vendaEstoque.estoque.preco_venda_original;
                if (vendaEstoque.estoque.preco_venda_desconto != null)
                {
                    valorVenda = vendaEstoque.estoque.preco_venda_desconto;
                }

                valorLucro = valorVenda - valorCompra;

                if (venda.taxa_juros != null && venda.taxa_juros > 0)
                {
                    // Descontar taxa da maquina do lucro total
                    valorTaxa = valorVenda * (venda.taxa_juros / 100);
                    valorLucro = valorLucro - valorTaxa;
                }
                else if(venda.taxa_juros != null && venda.taxa_juros < 0) {
                    if (vendaEstoque.estoque.desconto_pagamento_avista)
                    {
                        // Desconto no preço total(Pagamento Dinheiro ou Pix)
                        double? desconto = valorVenda * (Math.Abs(venda.taxa_juros.GetValueOrDefault()) / 100);
                        valorVenda = valorVenda - desconto;
                    }
                    // Descontar taxa da maquina do lucro total
                    valorLucro = valorVenda - valorCompra;
                }

                dadosMarcas?.Add(new ChartModelo { Nome = marca, Valor1 = valorCompra, Valor2 = valorLucro, Valor3 = valorTaxa });
            }
        }

        _dadosMarcas = dadosMarcas.GroupBy(x => x.Nome)
                                  .Select(g => new ChartModelo
                                    {
                                        Nome = g.Key,
                                        Valor1 = g.Sum(x => x.Valor1),
                                        Valor2 = g.Sum(x => x.Valor2),
                                        Valor3 = g.Sum(x => x.Valor3)
                                    })
                                  .OrderByDescending(x => x.Valor1 + x.Valor2 + x.Valor3)
                                  .ToList();
    }

    private void Voltar() => _mudDialog!.Close(DialogResult.Ok(true));
}
