@using AppPerfumaria.Api.ReinoCompany
@using AppPerfumaria.Components.CmpsGerais
@using AppPerfumaria.Components.Pages.Vendas.Cmp
@using AppPerfumaria.Models.Auth
@using AppPerfumaria.Models.Resources
@using AppPerfumaria.Models.Tables
@using System.Globalization
@using System.ComponentModel.DataAnnotations

@inject IDialogService Dialog
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject ISnackbar Snack

<MudDialog Style="max-height: 70%;">
    <DialogContent>
        <EditForm Model="_vendaForm" OnValidSubmit="Salvar" @ref="_vendaFormRef">
            <DataAnnotationsValidator />

            <MudFocusTrap Disabled="false" DefaultFocus="DefaultFocus.FirstChild">
                <MudSelect T="int" Value="_vendaForm!.formas_pagamentos_id" Variant="Variant.Outlined"
                           ValueChanged="@(async (int id) => { await SelecionarFormaPagamento(id); })"
                           Label="Forma de Pagamento*" Margin="Margin.Dense" Disabled="_verificando">
                    <MudSelectItem Value="0" hidden>Selecione</MudSelectItem>
                    @if(_listarFormasPagamentos != null)
                    {
                        @foreach (var formaPagamento in _listarFormasPagamentos)
                        {
                            <MudSelectItem Value="@formaPagamento.id">
                                @formaPagamento.nome
                            </MudSelectItem>
                        }
                    }
                </MudSelect>
                <ValidationMessage For="() => _vendaForm!.formas_pagamentos_id" />

                <!-- Crédito ou Débito -->
                @if (_vendaForm!.formas_pagamentos_id == 2 || _vendaForm!.formas_pagamentos_id == 3)
                {
                    if(_listarMaquinasCartao != null)
                    {
                        <MudSelect T="string" Value="_vendaForm!.maquina_cartao" Variant="Variant.Outlined"
                                   ValueChanged="@((string modelo) => { SelecionarMaquinaCartao(modelo); })"
                                   Label="Máquina Cartão*" Margin="Margin.Dense" Disabled="_verificando">
                            @foreach (var maquinaCartao in _listarMaquinasCartao)
                            {
                                <MudSelectItem Value="@maquinaCartao.modelo" />
                            }
                        </MudSelect>
                        <ValidationMessage For="() => _vendaForm!.maquina_cartao" />

                        @if (_vendaForm!.formas_pagamentos_id == 2 && 
                        !string.IsNullOrEmpty(_vendaForm!.maquina_cartao) &&
                        _listarTaxasParcelas != null)
                        {
                            <MudSelect T="string" Value="_quantidadeParcelas" Variant="Variant.Outlined"
                                       ValueChanged="@((string qtd_parcelas) => { SelecionarParcela(qtd_parcelas); })"
                                       Label="Quantidade Parcelas*" Margin="Margin.Dense" Disabled="_verificando">
                                @foreach (var item in _listarTaxasParcelas.Select((value, index) => new { value, index }))
                                {
                                    <MudSelectItem Value="@item.value.Key" Disabled="(item.index > 3)">
                                        <span class="d-flex">
                                            <span class="pa-0">
                                                @item.value.Key x @string.Format(new CultureInfo("pt-BR"), "{0:C}", (_precoPaga / int.Parse(item.value.Key)))
                                            </span>
                                            <div style="@($"background:{Colors.Gray.Lighten1}; font-size:12px; position:absolute; margin-left:120px; padding: 2px;")"
                                                  class="rounded fw-bold text-white">
                                                @item.value.Value%
                                            </div>
                                        </span>
                                    </MudSelectItem>
                                }
                            </MudSelect>
                            <ValidationMessage For="() => _vendaForm!.quantidade_parcelas" />
                        }
                    }

                }

                <MudAutocomplete T="Clientes" Label="Cliente*" Disabled="_verificando" @ref="_autoCompleteClienteRef"
                                 Value="@(_listarClientes?.FirstOrDefault(c => c!.id == _vendaForm!.clientes_id))"
                                 SearchFunc="@PesquisarClientes" ToStringFunc="@(c => c!.nome_completo.ToUpper())"
                                 ValueChanged="@((Clientes c) => { _vendaForm!.clientes_id = c!.id; })"
                                 CloseIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Default" Variant="Variant.Outlined"
                                 Strict="false" Margin="Margin.Dense" ShowProgressIndicator="true" ClearIcon="@Icons.Material.Filled.Clear" Clearable="true">
                    <BeforeItemsTemplate>
                        <MudButton IconSize="Size.Large" StartIcon="@Icons.Material.Filled.AddCircle" 
                                   Size="Size.Large" Variant="Variant.Text" Class="w-100" 
                                   Color="Color.Dark" IconColor="Color.Secondary" OnClick="CriarCliente">
                            ADICIONAR CLIENTE
                        </MudButton>
                    </BeforeItemsTemplate>
                    <NoItemsTemplate>
                        <MudButton IconSize="Size.Large" StartIcon="@Icons.Material.Filled.AddCircle"
                                   Size="Size.Large" Variant="Variant.Text" Class="w-100"
                                   Color="Color.Dark" IconColor="Color.Secondary" OnClick="CriarCliente">
                            ADICIONAR CLIENTE
                        </MudButton>
                        <MudDivider />
                        <MudText Align="Align.Center" Class="px-4 py-1">
                            Nenhum resultado encontrado!
                        </MudText>
                    </NoItemsTemplate>
                </MudAutocomplete>
                <ValidationMessage For="() => _vendaForm.clientes_id" />

@*                 <MudAutocomplete T="InstalacoesColaboradores" Label="Colaborador*" Disabled="_verificando"
                                 Value="@(_listarInstalacoesColaboradores?.FirstOrDefault(ic => ic.colaborador!.id == _vendaForm!.colaboradores_id))"
                                 SearchFunc="@PesquisarInstalacoesColaboradores" ToStringFunc="@(ic => ic?.colaborador!.nome_completo.ToUpper())"
                                 ValueChanged="@((InstalacoesColaboradores ic) => { _vendaForm!.colaboradores_id = ic.colaborador!.id; })"
                                 CloseIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Default" Variant="Variant.Outlined"
                                 Strict="false" Margin="Margin.Dense" ShowProgressIndicator="true" ClearIcon="@Icons.Material.Filled.Clear" Clearable="true">
                    <NoItemsTemplate>
                        <MudText Align="Align.Center" Class="px-4 py-1">
                            Nenhum resultado encontrado!
                        </MudText>
                    </NoItemsTemplate>
                </MudAutocomplete>
                <ValidationMessage For="() => _vendaForm.colaboradores_id" /> *@
            </MudFocusTrap>
        </EditForm>
    </DialogContent>
    <DialogActions>
        <div class="d-block w-100 px-2">
            @if (_carregando)
            {
                <MudProgressLinear Color="Color.Secondary" Rounded="true" Striped="true"
                                   Size="Size.Medium" Value="100" Class="mb-2" />
            }
            <MudFab Class="w-100" Label="Salvar" Size="Size.Medium"
                    OnClick="ValidarDadosForm" Disabled="_verificando" />
            <MudFab Class="w-100 mt-2 mb-5" Label="Fechar" OnClick="(() => _mudDialog!.Cancel())"
                    Size="Size.Medium" Disabled="_verificando" />
        </div>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private MudDialogInstance? _mudDialog { get; set; }
    [Parameter]
    public Vendas? _vendaForm { get; set; }
    [Parameter]
    public double? _precoPaga { get; set; }
    private Auth? _auth;
    private Instalacoes? _instalacao { get; set; }
    private List<Estoques>? _produtosCarinho;
    private EditForm? _vendaFormRef;
    private List<FormasPagamentos>? _listarFormasPagamentos;
    private List<MaquinasCartao>? _listarMaquinasCartao;
    private Dictionary<string, double>? _listarTaxasParcelas;
    private List<Clientes>? _listarClientes;
    private MudAutocomplete<Clientes>? _autoCompleteClienteRef;
    private List<InstalacoesColaboradores>? _listarInstalacoesColaboradores;
    private bool _carregando = true;
    private bool _verificando = true;
    private string? _formaPagamento;
    private string? _pesquisarCliente;
    private string? _pesquisarColaborador;
    private string? _quantidadeParcelas;

    protected override async Task OnInitializedAsync()
    {
        _auth = await LocalStorage.GetItemAsync<Auth>("auth");
        _instalacao = await LocalStorage.GetItemAsync<Instalacoes>("instalacao");
        _produtosCarinho = await LocalStorage.GetItemAsync<List<Estoques>>("carinho");

        _vendaForm!.estoques_ids = _produtosCarinho!.Select(w => w.id).ToList();

        if (_vendaForm!.id > 0)
        {
            _pesquisarCliente = await BuscarCliente(_vendaForm!.clientes_id);
            // _pesquisarColaborador = await BuscarColaborador(_vendaForm!.colaboradores_id);
        }
        else
        {
            _vendaForm!.instalacoes_id = _instalacao!.id;
        }

        _listarFormasPagamentos = await ListarFormasPagamentos(_pesquisarColaborador!);
        _listarClientes = await ListarClientes(_pesquisarCliente!);
        // _listarInstalacoesColaboradores = await ListarInstalacoesColaboradores(_pesquisarColaborador!);

        _carregando = false;
        _verificando = false;
        StateHasChanged();
    }

    public async Task SelecionarFormaPagamento(int formaPagamentoId)
    {
        _vendaForm!.formas_pagamentos_id = formaPagamentoId;
        await ListarMaquinasCartao();
        SelecionarMaquinaCartao();
        StateHasChanged();
    }

    public void SelecionarMaquinaCartao(string? modelo = null)
    {
        _vendaForm!.maquina_cartao = modelo;
        SelecionarParcela();
        var maquinaCartao = _listarMaquinasCartao!.FirstOrDefault(w => w.modelo == modelo);
        if (maquinaCartao != null)
        {
            if (_vendaForm!.formas_pagamentos_id == 2)
            {
                _listarTaxasParcelas = maquinaCartao.taxas_parcelas!;
            }
            else if (_vendaForm!.formas_pagamentos_id == 3)
            { 
                _vendaForm!.taxa_juros = maquinaCartao.taxa_debito;
            }
        }
        StateHasChanged();
    }

    public void SelecionarParcela(string? qtdParcelas = null)
    {
        _quantidadeParcelas = qtdParcelas;
        _vendaForm!.quantidade_parcelas = Convert.ToInt32(qtdParcelas) > 0 ? Convert.ToInt32(qtdParcelas) : null ;
        _vendaForm!.taxa_juros = null;
        var maquinaCartao = _listarMaquinasCartao!.FirstOrDefault(w => w.modelo == _vendaForm!.maquina_cartao);
        if (maquinaCartao != null && qtdParcelas is not null)
        {
            var parcelaTaxa = maquinaCartao!.taxas_parcelas!.FirstOrDefault(w => w.Key == qtdParcelas);
            if (maquinaCartao != null)
            {
                _vendaForm!.taxa_juros = parcelaTaxa.Value;
            }
        }
        StateHasChanged();
    }

    private async Task<IEnumerable<Clientes>?> PesquisarClientes(string pesquisar, CancellationToken token)
    {
        _pesquisarCliente = pesquisar;
        await Task.Delay(1500);

        if (pesquisar == _pesquisarCliente)
        {
            _listarClientes = await ListarClientes(pesquisar);
            return _listarClientes;
        }

        return _listarClientes;
    }

    private async Task<IEnumerable<InstalacoesColaboradores>?> PesquisarInstalacoesColaboradores(string pesquisar, CancellationToken token)
    {
        _pesquisarColaborador = pesquisar;
        await Task.Delay(1500);

        if (pesquisar == _pesquisarColaborador)
        {
            _listarInstalacoesColaboradores = await ListarInstalacoesColaboradores(pesquisar);
            return _listarInstalacoesColaboradores;
        }

        return _listarInstalacoesColaboradores;
    }

    private async Task<List<Clientes>?> ListarClientes(string? pesquisar = null)
    {
        try
        {
            string filtros = $"?por_pagina=20&status=Ativo";

            if (!string.IsNullOrEmpty(pesquisar))
            {
                filtros += $"&pesquisar={pesquisar}";
            }

            var reinoCompany = new ReinoCompany();
            var response = await reinoCompany.ClientesListar(_auth!.token!, filtros);

            List<Clientes>? listarClientes = new List<Clientes>();

            if (response!.status)
            {
                listarClientes = response!.data!;
            }
            else
            {
                if (!string.IsNullOrEmpty(response.message))
                {
                    Snack.Add(response.message, Severity.Warning);
                }
            }

            return listarClientes;
        }
        catch (Exception e)
        {
            Snack.Add("Tivemos um problema ao tentar listar os clientes!", Severity.Warning);
            return new List<Clientes>();
        }
    }

    public async Task CriarCliente()
    {
        try
        {
            await _autoCompleteClienteRef!.CloseMenuAsync();

            var options = new DialogOptions
                {
                    MaxWidth = MaxWidth.ExtraExtraLarge,
                    FullWidth = true,
                    BackdropClick = false,
                    CloseButton = true,
                    Position = DialogPosition.TopCenter
                };
            var param = new DialogParameters { ["_clienteForm"] = new Clientes() };
            var dialog = Dialog.Show<ClientesFormCmp>("Adicionar Cliente", param, options);
            var result = await dialog.Result;
            ClientesResource clientesResource = (ClientesResource)result!.Data!;
            if (!result.Canceled && clientesResource.status == true && clientesResource.data != null)
            {
                _vendaForm!.clientes_id = clientesResource.data.id;
                _pesquisarCliente = await BuscarCliente(_vendaForm!.clientes_id);
                _listarClientes = await ListarClientes(_pesquisarCliente!);
                Snack.Add("Cliente criado com sucesso!", Severity.Success);
                StateHasChanged();
            }
            else if (!result.Canceled && clientesResource.status == false && clientesResource.data == null)
            {
                Snack.Add("Tivemos um problema ao tentar criar o cliente!", Severity.Warning);
            }
        }
        catch (Exception e)
        {
            Snack.Add("Tivemos um problema ao tentar criar o cliente!", Severity.Warning);
        }
    }

    private async Task<List<InstalacoesColaboradores>?> ListarInstalacoesColaboradores(string? pesquisar = null)
    {
        try
        {
            string filtros = $"?instalacoes_id={_instalacao!.id}&por_pagina=20&status=Ativo";

            if (!string.IsNullOrEmpty(pesquisar))
            {
                filtros += $"&pesquisar={pesquisar}";
            }

            var reinoCompany = new ReinoCompany();
            var response = await reinoCompany.InstalacoesColaboradoresListar(_auth!.token!, filtros);

            List<InstalacoesColaboradores>? listarInstalacoesColaboradores = new List<InstalacoesColaboradores>();

            if (response!.status)
            {
                listarInstalacoesColaboradores = response!.data!;
            }
            else
            {
                if (!string.IsNullOrEmpty(response.message))
                {
                    Snack.Add(response.message, Severity.Warning);
                }
            }

            return listarInstalacoesColaboradores;
        }
        catch (Exception e)
        {
            Snack.Add("Tivemos um problema ao tentar listar os colaboradores!", Severity.Warning);
            return new List<InstalacoesColaboradores>();
        }
    }

    private async Task<string?> BuscarCliente(int clienteId)
    {
        try
        {
            var reinoCompany = new ReinoCompany();
            var response = await reinoCompany.ClientesBuscar(_auth!.token!, clienteId);

            if (response!.status)
            {
                return response!.data!.nome_completo;
            }
            else
            {
                if (!string.IsNullOrEmpty(response.message))
                {
                    Snack.Add(response.message, Severity.Warning);
                }
            }

            return "";
        }
        catch (Exception e)
        {
            Snack.Add("Tivemos um problema ao tentar buscar cliente!", Severity.Warning);
            return "";
        }
    }

    // private async Task<string?> BuscarColaborador(int colaboradorId)
    // {
    //     try
    //     {
    //         var reinoCompany = new ReinoCompany();
    //         var response = await reinoCompany.ColaboradoresBuscar(_auth!.token!, colaboradorId);

    //         if (response!.status)
    //         {
    //             return response!.data!.nome_completo;
    //         }
    //         else
    //         {
    //             if (!string.IsNullOrEmpty(response.message))
    //             {
    //                 Snack.Add(response.message, Severity.Warning);
    //             }
    //         }

    //         return "";
    //     }
    //     catch (Exception e)
    //     {
    //         Snack.Add("Tivemos um problema ao tentar buscar colaborador!", Severity.Warning);
    //         return "";
    //     }
    // }

    private async Task<List<FormasPagamentos>?> ListarFormasPagamentos(string? pesquisar = null)
    {
        try
        {
            string filtros = $"?instalacoes_id={_instalacao!.id}&por_pagina=20&status=Ativo";

            if (!string.IsNullOrEmpty(pesquisar))
            {
                filtros += $"&pesquisar={pesquisar}";
            }

            var reinoCompany = new ReinoCompany();
            var response = await reinoCompany.FormasPagamentosListar(_auth!.token!, filtros);

            List<FormasPagamentos>? listarFormasPagamentos = new List<FormasPagamentos>();

            if (response!.status)
            {
                listarFormasPagamentos = response!.data!;
            }
            else
            {
                if (!string.IsNullOrEmpty(response.message))
                {
                    Snack.Add(response.message, Severity.Warning);
                }
            }

            return listarFormasPagamentos;
        }
        catch (Exception e)
        {
            Snack.Add("Tivemos um problema ao tentar listar as formas de pagamento!", Severity.Warning);
            return new List<FormasPagamentos>();
        }
    }

    private async Task ListarMaquinasCartao(string? pesquisar = null)
    {
        try
        {
            string filtros = $"?instalacoes_id={_instalacao!.id}&status=Ativo";

            if (!string.IsNullOrEmpty(pesquisar))
            {
                filtros += $"&pesquisar={pesquisar}";
            }

            var reinoCompany = new ReinoCompany();
            var response = await reinoCompany.MaquinasCartaoListar(_auth!.token!, filtros);

            if (response!.status)
            {
                _listarMaquinasCartao = response!.data!;
            }
            else
            {
                if (!string.IsNullOrEmpty(response.message))
                {
                    Snack.Add(response.message, Severity.Warning);
                }
            }
        }
        catch (Exception e)
        {
            Snack.Add("Tivemos um problema ao tentar listar as formas de pagamento!", Severity.Warning);
        }
    }

    private async Task ValidarDadosForm()
    {
        try
        {
            _carregando = true;
            _verificando = true;

            if (_vendaFormRef!.EditContext!.Validate())
            {
                await Salvar();
            }
            else
            {
                Snack.Add("Por favor, verifique todos os campos!", Severity.Warning);
                _verificando = false;
                _carregando = false;
            }
        }
        catch (Exception e)
        {
            Snack.Add("Tivemos um problema ao tentar validar dados!", Severity.Warning);
        }
    }

    public async Task Salvar()
    {
        try
        {
            var reinoCompany = new ReinoCompany();

            InstalacoesClientes instalacaoCliente = new InstalacoesClientes
                {
                    instalacoes_id = _instalacao!.id,
                    clientes_id = _vendaForm!.clientes_id,
                    status = "Ativo"
                };
            InstalacoesClientesResource? responseInstalacaoCliente;
            responseInstalacaoCliente = await reinoCompany.InstalacoesClientesCriar(_auth!.token!, instalacaoCliente!);

            if (!responseInstalacaoCliente!.status)
            {
                if (!string.IsNullOrEmpty(responseInstalacaoCliente.message))
                {
                    Snack.Add(responseInstalacaoCliente.message, Severity.Warning);
                    _verificando = false;
                    _carregando = false;
                    return;
                }
            }

            // Dinheiro ou Pix
            if (new[] { 1, 4 }.Contains(_vendaForm!.formas_pagamentos_id))
            {
                _vendaForm!.taxa_juros = -5.0;
            }
            _vendaForm!.status = "Ativo";
            _vendaForm!.colaboradores_id = _auth!.data!.colaborador_user!.colaboradores_id!;
            VendasResource? responseVenda;

            if (_vendaForm.id > 0)
            {
                responseVenda = await reinoCompany.VendasAtualizar(_auth!.token!, _vendaForm!);
            }
            else
            {
                responseVenda = await reinoCompany.VendasCriar(_auth!.token!, _vendaForm!);
            }

            if (responseVenda!.status)
            {

                _produtosCarinho = new List<Estoques>();
                await LocalStorage.SetItemAsync("carinho", _produtosCarinho);

                _mudDialog!.Close(DialogResult.Ok<bool>(true));
            }
            else
            {
                if (!string.IsNullOrEmpty(responseVenda.message))
                {
                    Snack.Add(responseVenda.message, Severity.Warning);
                }

                if (responseVenda.erros != null)
                {
                    var erros = responseVenda.erros;
                    foreach (var propriedade in erros.GetType().GetProperties())
                    {
                        List<string>? propErros = (List<string>)erros.GetType().GetProperty(propriedade.Name).GetValue(erros, null);
                        if (propErros != null)
                        {
                            foreach (var mensagem in propErros)
                            {
                                Snack.Add(mensagem, Severity.Warning);
                            }
                        }
                    }
                }
                _verificando = false;
                _carregando = false;
            }
        }
        catch (Exception e)
        {
            Snack.Add("Tivemos um problema ao tentar salvar!", Severity.Warning);
            _verificando = false;
            _carregando = false;
        }
    }
}
