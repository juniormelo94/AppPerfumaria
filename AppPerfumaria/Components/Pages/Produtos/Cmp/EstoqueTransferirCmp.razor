@using AppPerfumaria.Api.ReinoCompany
@using AppPerfumaria.Components.CmpsGerais
@using AppPerfumaria.Models.Auth
@using AppPerfumaria.Models.Resources
@using AppPerfumaria.Models.Tables

@inject IDialogService Dialog
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject ISnackbar Snack

<MudDialog Style="max-height: 70%;">
    <DialogContent>
        <EditForm Model="_estoqueForm" OnValidSubmit="Salvar" @ref="_estoqueFormRef">
            <DataAnnotationsValidator />

            <MudFocusTrap Disabled="false" DefaultFocus="DefaultFocus.FirstChild">
                <MudSelect @bind-Value="_estoqueForm.instalacoes_id" Variant="Variant.Outlined"
                Label="Instalação" Margin="Margin.Dense">
                    @if (_instalacoes != null)
                    {
                        @foreach (var instalacao in _instalacoes)
                        {
                            <MudSelectItem Value="instalacao.id">
                                @($"{instalacao.endereco.ToUpper()} {instalacao.numero.ToUpper()}, {instalacao.bairro.ToUpper()} - {instalacao.cidade.ToUpper()}/{instalacao.uf.ToUpper()}")
                            </MudSelectItem>
                        }
                    }
                </MudSelect>
                <ValidationMessage For="() => _estoqueForm.instalacoes_id" />
            </MudFocusTrap>
        </EditForm>
    </DialogContent>
    <DialogActions>
        <div class="d-block w-100 px-2">
            @if (_carregando)
            {
                <MudProgressLinear Color="Color.Secondary" Rounded="true" Striped="true"
                Size="Size.Medium" Value="100" Class="mb-2" />
            }
            <MudFab Class="w-100" Label="Salvar" Size="Size.Medium"
            OnClick="ValidarDadosForm" Disabled="_verificando" />
            <MudFab Class="w-100 mt-2 mb-5" Label="Fechar" OnClick="(() => _mudDialog!.Cancel())"
            Size="Size.Medium" Disabled="_verificando" />
        </div>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private MudDialogInstance? _mudDialog { get; set; }
    [Parameter]
    public Estoques? _estoqueForm { get; set; }
    [Parameter]
    public InstalacoesProdutos? _instalacaoProduto { get; set; }
    private List<Instalacoes>? _instalacoes; 
    private Auth? _auth;
    private Instalacoes? _instalacao;
    private EditForm? _estoqueFormRef;
    private bool _carregando = true;
    private bool _verificando = false;

    protected override async Task OnInitializedAsync()
    {
        _auth = await LocalStorage.GetItemAsync<Auth>("auth");
        _instalacao = await LocalStorage.GetItemAsync<Instalacoes>("instalacao");

        List<string>? instalacoes_ids = _auth?.data?.colaborador_user?.instalacoes_ids;
        var reinoCompany = new ReinoCompany();
        string filtros = $"?status=ativo&divisoes_id={_instalacao.divisoes_id}";
        var response = await reinoCompany.InstalacoesListar(_auth!.token!, filtros);

        if (response!.status)
        {
            _instalacoes = response!.data!.Where(instalacao => instalacoes_ids.Contains(instalacao.id.ToString()))
                                          .ToList();
        }
        else
        {
            if (!string.IsNullOrEmpty(response.message))
            {
                Snack.Add(response.message, Severity.Warning);
            }
        }

        _carregando = false;
        StateHasChanged();
    }

    private async Task ValidarDadosForm()
    {
        try
        {
            _carregando = true;
            _verificando = true;

            if (_estoqueFormRef!.EditContext!.Validate())
            {
                await Salvar();
            }
            else
            {
                Snack.Add("Por favor, verifique todos os campos!", Severity.Warning);
                _verificando = false;
                _carregando = false;
            }
        }
        catch (Exception e)
        {
            Snack.Add("Tivemos um problema ao tentar validar dados!", Severity.Warning);
        }
    }

    public async Task Salvar()
    {
        try
        {
            if (_instalacao.id == _estoqueForm.instalacoes_id)
            {
                Snack.Add("O item já pertence a esse estoque!", Severity.Warning);
                _verificando = false;
                _carregando = false;
                return;
            }

            var reinoCompany = new ReinoCompany();
            var responseProduto = await reinoCompany.ProdutosBuscar(_auth!.token!, _estoqueForm.produtos_id);

            if (!responseProduto!.status)
            {
                if (!string.IsNullOrEmpty(responseProduto.message))
                {
                    Snack.Add(responseProduto.message, Severity.Warning);
                }
                _carregando = false;
                return;
            }

            var instalacaoMarca = new InstalacoesMarcas
                {
                    instalacoes_id = _estoqueForm.instalacoes_id,
                    marcas_id = responseProduto.data.marcas_id,
                    status = "Ativo",
                };
            var responseInstalacaoMarca = await reinoCompany.InstalacoesMarcasCriar(_auth!.token!, instalacaoMarca);

            if (!responseInstalacaoMarca!.status && responseInstalacaoMarca.erros.marcas_id.Count() < 1)
            {
                if (!string.IsNullOrEmpty(responseInstalacaoMarca.message))
                {
                    Snack.Add(responseInstalacaoMarca.message, Severity.Warning);
                }
                _carregando = false;
                return;
            }

            var instalacaoProduto = new InstalacoesProdutos
                {
                    instalacoes_id = _estoqueForm.instalacoes_id,
                    produtos_id = _estoqueForm.produtos_id,
                    status = "Ativo",
                };
            var responseInstalacaoProduto = await reinoCompany.InstalacoesProdutosCriar(_auth!.token!, instalacaoProduto);

            if (!responseInstalacaoProduto!.status && responseInstalacaoProduto.erros.produtos_id.Count() < 1)
            {
                if (!string.IsNullOrEmpty(responseInstalacaoProduto.message))
                {
                    Snack.Add(responseInstalacaoProduto.message, Severity.Warning);
                }
                _carregando = false;
                return;
            }

            EstoquesResource? responseEstoque = await reinoCompany.EstoquesAtualizar(_auth!.token!, _estoqueForm!);

            if (responseEstoque!.status)
            {
                _mudDialog!.Close(DialogResult.Ok<bool>(true));
            }
            else
            {
                if (!string.IsNullOrEmpty(responseEstoque.message))
                {
                    Snack.Add(responseEstoque.message, Severity.Warning);
                }

                if (responseEstoque.erros != null)
                {
                    var erros = responseEstoque.erros;
                    foreach (var propriedade in erros.GetType().GetProperties())
                    {
                        List<string>? propErros = (List<string>)erros.GetType().GetProperty(propriedade.Name).GetValue(erros, null);
                        if (propErros != null)
                        {
                            foreach (var mensagem in propErros)
                            {
                                Snack.Add(mensagem, Severity.Warning);
                            }
                        }
                    }
                }
                _verificando = false;
                _carregando = false;
            }
        }
        catch (Exception e)
        {
            Snack.Add("Tivemos um problema ao tentar salvar!", Severity.Warning);
            _verificando = false;
            _carregando = false;
        }
    }
}
