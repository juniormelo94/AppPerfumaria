@using AppPerfumaria.Api.ReinoCompany
@using AppPerfumaria.Components.CmpsGerais
@using AppPerfumaria.Models.Auth
@using AppPerfumaria.Models.Pagination
@using AppPerfumaria.Models.Tables
@using ZXing.Net.Maui

@inject ISnackbar Snack

<MudDialog ContentClass="bg-gray pa-0">
    <DialogContent>
        <MudOverlay DarkBackground Visible="_carregando" ZIndex="10">
            <MudProgressCircular Indeterminate="true" Color="Color.Default" />
        </MudOverlay>

        <MudPaper Class="px-2 w-100" Elevation="4" Style="position:fixed; z-index: 9;">
            <!-- Barra de leitor -->
            <div class="d-flex">
                <MudTextField Value="_leitorFiltro" Label="Código Barras ou QR Code" Variant="Variant.Outlined"
                              Adornment="Adornment.End" Margin="Margin.Dense" Immediate="true"
                              ValueChanged="(async (string v) => { _leitorFiltro = v; await Leitor(v); })"
                              AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Inherit"
                              ClearIcon="@Icons.Material.Filled.Clear" Clearable="true" />
                <MudSpacer />
                <MudIconButton Icon="@Icons.Material.Filled.QrCodeScanner" OnClick="AbrirScanner"
                               Color="Color.Inherit" Size="Size.Medium" />
            </div>
            <!-- Barra de pesquisa e botão filtro -->
            <div class="d-flex">
                <MudTextField Value="_pesquisarFiltro" Label="Pesquisar" Variant="Variant.Outlined"
                              Adornment="Adornment.End" Margin="Margin.Dense" Immediate="true"
                              ValueChanged="(async (string v) => { _pesquisarFiltro = v; await Pesquisar(v); })"
                              AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Inherit"
                              ClearIcon="@Icons.Material.Filled.Clear" Clearable="true" />
                <MudSpacer />
            </div>
        </MudPaper>

        <div class="pa-2" style="margin-top: 110px;">
            <!-- Listar resultados dos produtos associados -->
            <MudGrid Spacing="2" Justify="Justify.Center">
                @if (_listarInstalacoesProdutos != null && _listarInstalacoesProdutos.Count() > 0)
                {
                    @foreach (var instalacaoProduto in _listarInstalacoesProdutos)
                    {
                        <MudItem xs="6">
                            <MudCard Style="height: 300px;" @onclick="(() => Selecionar(instalacaoProduto!.produto))">
                                <MudIcon Style="position:absolute;" Class="mt-2 ml-2" Color="@(instalacaoProduto.status == "Ativo" ? Color.Dark : Color.Default)"
                                            Icon="@(instalacaoProduto.status == "Ativo" ? Icons.Material.Filled.ThumbUp : @Icons.Material.Filled.ThumbDown)" />
                                <MudCardMedia Image="@($"data:image/png;base64,{instalacaoProduto!.produto.img_1}")" />
                                <MudCardContent Class="py-2">
                                    <MudText Class="fw-bold" Typo="Typo.body1">
                                        @if (instalacaoProduto!.produto.nome.Length > 35)
                                        {
                                            @($"{instalacaoProduto!.produto.nome.Substring(0, 35).ToUpper()}...")
                                        }
                                        else
                                        {
                                            @instalacaoProduto!.produto.nome.ToUpper()
                                        }
                                    </MudText>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                    }

                    <MudItem Class="py-5" xs="12">
                        @if (_paginacaoInstalacoesProdutos!.current_page != _paginacaoInstalacoesProdutos!.last_page)
                        {
                            <MudFab Class="w-100" Label="Carregar Mais" OnClick="CarregarMais"
                                    Disabled="false" Size="Size.Small" />
                        }

                        <MudText Align="Align.Center" Typo="Typo.body2" Class="mt-2 w-100">
                            @($"Total: {_paginacaoInstalacoesProdutos!.total} | Exibidos: {_paginacaoInstalacoesProdutos!.to}")
                        </MudText>
                    </MudItem>
                }
                else
                {
                    @if (!_carregando)
                    {
                        <MudItem Class="py-5" xs="12">
                            <Animate class="w-100" Animation="Animations.FadeDown" Duration="TimeSpan.FromSeconds(0.5)" Delay="TimeSpan.FromSeconds(0.4)">
                                <MudText Class="mt-5" Align="Align.Center" Typo="Typo.body1">Nenhum resultado foi encontrado!</MudText>
                            </Animate>
                        </MudItem>
                    }
                }
            </MudGrid>
        </div>
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter]
    private MudDialogInstance? _mudDialog { get; set; }
    [Parameter] public Auth? Auth { get; set; }
    [Parameter] public Instalacoes? Instalacao { get; set; }
    private List<InstalacoesProdutos>? _listarInstalacoesProdutos = new List<InstalacoesProdutos>();
    private MetaPagination? _paginacaoInstalacoesProdutos;
    private bool _carregando = true;
    private string? _pesquisarFiltro;
    private string? _leitorFiltro;
    private string _porPagina = "10";
    private int _paginaPaginacao = 1;

    protected override async Task OnInitializedAsync()
    {
        do
        {
            await Task.Delay(300);
        }
        while (Auth == null || Instalacao == null);

        await ListarInstalacaoProdutos();
    }

    private async Task Pesquisar(string pesquisar)
    {
        await Task.Delay(1500);

        if (pesquisar == _pesquisarFiltro)
        {
            await AplicarFiltros();
        }
    }

    private async Task Leitor(string leitor)
    {
        await Task.Delay(1500);

        if (leitor == _leitorFiltro)
        {
            await AplicarFiltros();
        }
    }

    public async Task AbrirScanner()
    {
        var resultados = await BuscarResultadoScan();
        var barcode = resultados.FirstOrDefault();
        if (barcode != null)
        {
            _leitorFiltro = barcode.Value;
            await AplicarFiltros();
        }
    }

    public async Task<BarcodeResult[]> BuscarResultadoScan()
    {
        var cameraPage = new CameraPage();
        await Application.Current!.MainPage!.Navigation.PushModalAsync(cameraPage);

        return await cameraPage.WaitForResultAsync();
    }

    public async Task CarregarMais()
    {
        _paginaPaginacao++;
        await ListarInstalacaoProdutos();
    }

    public string? PegarFiltros()
    {
        string filtros = $"?instalacoes_id={Instalacao!.id}&vendido=0&page={_paginaPaginacao}&por_pagina={_porPagina}";

        if (!string.IsNullOrEmpty(_pesquisarFiltro))
        {
            filtros += $"&pesquisar={_pesquisarFiltro}";
        }
        if (!string.IsNullOrEmpty(_leitorFiltro))
        {
            filtros += $"&leitor={_leitorFiltro}";
        }

        return filtros;
    }

    public async Task AplicarFiltros()
    {
        await LimparEListarInstalacaoProdutos();
    }

    public async Task LimparEListarInstalacaoProdutos()
    {
        _paginaPaginacao = 1;
        _listarInstalacoesProdutos = new List<InstalacoesProdutos>();
        await ListarInstalacaoProdutos();
    }

    public async Task ListarInstalacaoProdutos()
    {
        try
        {
            _carregando = true;
            StateHasChanged();
            string? filtros = PegarFiltros();

            var reinoCompany = new ReinoCompany();
            var response = await reinoCompany.InstalacoesProdutosListar(Auth!.token!, filtros);

            if (response!.status)
            {
                _paginacaoInstalacoesProdutos = response.meta;
                _listarInstalacoesProdutos!.AddRange(response!.data!);
            }
            else
            {
                if (!string.IsNullOrEmpty(response.message))
                {
                    Snack.Add(response.message, Severity.Warning);
                }
            }

            _carregando = false;
            StateHasChanged();
        }
        catch (Exception e)
        {
            Snack.Add("Tivemos um problema ao tentar listar os produtos dessa instalação!", Severity.Warning);
            _carregando = false;
        }
    }

    public void Selecionar(Produtos produto)
    {
        _mudDialog!.Close(DialogResult.Ok<Produtos>(produto));
    }
}
