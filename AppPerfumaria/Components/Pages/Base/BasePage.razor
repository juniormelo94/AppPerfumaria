@page "/base"
@using AppPerfumaria.Api.ReinoCompany
@using AppPerfumaria.Components.CmpsGerais
@using AppPerfumaria.Components.Pages.Base.Cmp
@using AppPerfumaria.Models.Auth
@using AppPerfumaria.Models.Tables
@using System.Globalization
@using AppPerfumaria.Services

@inject IDialogService Dialog
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager Nav
@inject ISnackbar Snack
@inject Carrinho Carrinho


@* @if (_carregando)
{
    <Loading AlignCenter="true" Color="Color.Default" Size="Size.Medium" />
} *@

<div class="sidebar">
    <MudLayout>
        @* Barra de menu superior *@
        <MudAppBar Bottom="false" Fixed="true" Color="Color.Inherit" Elevation="4" Style="@($"background:{Colors.Pink.Darken3};")">
            @*             <MudIconButton Icon="@Icons.Material.Filled.QrCodeScanner"
                           Color="Color.Inherit" Class="ml-2" OnClick="@(() => CarregarOpcaoBarraSuperior("Inicio"))" /> *@
            @*             <MudButton Class="h-100" Color="Color.Inherit">
                    <MudIcon Icon="@Icons.Material.Filled.QrCodeScanner" Color="Color.Inherit" />
            </MudButton> *@
            <MudSpacer />
            @*             <MudIconButton Color="Color.Inherit" OnClick="Carinho" >
                <MudBadge Content="_produtosCarinho?.Count()" Overlap="true" Visible="true" Color="Color.Dark">
                    <MudIcon Icon="@Icons.Material.Filled.LocalGroceryStore" Color="Color.Inherit" />
                </MudBadge>
            </MudIconButton> *@
            <MudButton Class="h-100" Color="Color.Inherit" OnClick="(() => Carinho())">
                <MudBadge Content="_produtosCarinho?.Count()" Overlap="true" Visible="true" Color="Color.Dark" Class="mt-2">
                    <MudIcon Icon="@Icons.Material.Filled.LocalGroceryStore" Color="Color.Inherit" />
                </MudBadge>
            </MudButton>
        </MudAppBar>
        @* Aba do carinho *@
        <MudMainContent Class="mb-0">
            <MudDrawer @bind-Open="_exibirCarinho" Anchor="MudBlazor.Anchor.Right" Variant="DrawerVariant.Temporary"
            Color="Color.Inherit" Style="margin-bottom: 100px;" Width="100vw">
                <MudDrawerHeader>
                    <MudText Typo="Typo.h5" Class="mt-3">CARINHO</MudText>
                    <MudSpacer />
                    <MudIconButton Icon="@Icons.Material.Filled.KeyboardArrowRight" Size="Size.Large"
                                   Color="Color.Inherit" OnClick="(() => Carinho())" />
                </MudDrawerHeader>
                <MudDivider />
                <div class="bg-gray" style="height:100vh;">
                    @if(_venda.id > 1)
                    {
                        <MudAlert Class="ma-4" Variant="Variant.Outlined"
                                  Severity="Severity.Warning" Icon="@Icons.Material.Filled.Edit">
                            Atualizando a venda Nº @_venda.id
                        </MudAlert>
                    }

                    <MudPaper Class="pa-4 ma-4" Elevation="0">
                        <div class="d-flex">
                            <MudText Typo="Typo.body1">
                                Total Pedido:
                            </MudText>
                            <MudSpacer />
                            <MudText Class="@(_produtosCarinho?.FirstOrDefault(w => w.preco_venda_desconto != null) != null ? "fw-bold text-decoration-line-through" : "fw-bold")" Typo="Typo.body1">
                                @string.Format(new CultureInfo("pt-BR"), "{0:C}", _produtosCarinho?.Sum(w => w.preco_venda_original))
                            </MudText>
                        </div>
                        @if (_produtosCarinho?.FirstOrDefault(w => w.preco_venda_desconto != null) != null)
                        {                 
                            <div class="d-flex">
                                <MudText Typo="Typo.body1">
                                    Total Desconto:
                                </MudText>
                                <MudSpacer />
                                <MudText Class="fw-bold" Typo="Typo.body1">
                                    @string.Format(new CultureInfo("pt-BR"), "{0:C}", CalcularTotalDesconto())
                                </MudText>
                            </div>
                        }
                        <div class="d-flex">
                            <MudText Typo="Typo.body1">
                                Pagamento (Dinheiro ou Pix):
                            </MudText>
                            <MudSpacer />
                            <MudText Class="fw-bold" Typo="Typo.body1">
                                @string.Format(new CultureInfo("pt-BR"), "{0:C}", CalcularPagamentoDinheiroPix())
                            </MudText>
                        </div>
                        @if (_produtosCarinho != null && _produtosCarinho?.Count() > 0)
                        {
                            <div class="d-flex align-items-center justify-content-center mt-3">
                                <MudFab Label="Finalizar Compra" Color="Color.Secondary" 
                                Size="Size.Small" OnClick="CriarVenda" />
                            </div>
                        }
                        @if (_venda.id > 1)
                        {
                            <div class="d-flex align-items-center justify-content-center mt-3">
                                <MudFab Label="Cancelar Atualização"
                                        Size="Size.Small" OnClick="CancelarAtualizacaoVenda" />
                            </div>
                        }
                    </MudPaper>

                    @if (_produtosCarinho != null)
                    {
                        <MudPaper Class="px-4 py-3" Elevation="0">
                            <MudText Typo="Typo.body1" Class="fw-bold">
                                @(_produtosCarinho.Count().ToString() + (_produtosCarinho.Count() == 1 ? " Item" : " Itens"))
                            </MudText>
                        </MudPaper>

                        @foreach (var item in _produtosCarinho)
                        {
                            <MudPaper Class="px-4 py-2 mt-1" Elevation="0">
                                <MudGrid Spacing="2" Justify="Justify.Center">
                                    <MudItem xs="2" Class="d-flex align-items-center justify-content-center">
                                        @if (!string.IsNullOrEmpty(item!.produto!.img_1))
                                        {
                                            <MudCardMedia Class="rounded-lg" Image="@($"data:image/png;base64,{item!.produto!.img_1}")" Style="height: 40px; width:40px;" />
                                        }
                                    </MudItem>
                                    <MudItem xs="10">
                                        <MudGrid Spacing="2" Justify="Justify.Center">
                                            <MudItem xs="10">
                                                <MudText Typo="Typo.body2" Class="fw-bold">
                                                    @item!.produto!.nome.ToUpper()
                                                </MudText>
                                            </MudItem>
                                            <MudItem xs="2" Class="d-flex align-items-center justify-content-lg-center">
                                                <div>
                                                    <MudText Typo="Typo.body2" Class="d-flex text-center">
                                                        @item!.id
                                                    </MudText>
                                                </div>
                                            </MudItem>
                                        </MudGrid>
                                        <MudDivider Class="my-1" DividerType="DividerType.Middle" />
                                        <MudGrid Spacing="2" Justify="Justify.Center">
                                            <MudItem xs="10">
                                                <div class="d-flex">
                                                    <MudText Typo="Typo.body2">
                                                        Preço:
                                                    </MudText>
                                                    <MudSpacer />
                                                    <MudText Typo="Typo.body2" Class="@(item.preco_venda_desconto != null ? "fw-bold text-decoration-line-through" : "fw-bold")">
                                                        @string.Format(new CultureInfo("pt-BR"), "{0:C}", item.preco_venda_original)
                                                    </MudText>
                                                </div>
                                                @if (item.preco_venda_desconto != null)
                                                {
                                                    <div class="d-flex">
                                                        <MudText Typo="Typo.body2">
                                                            Preço Desconto:
                                                        </MudText>
                                                        <MudSpacer />
                                                        <MudText Class="fw-bold" Typo="Typo.body2">
                                                            @string.Format(new CultureInfo("pt-BR"), "{0:C}", item.preco_venda_desconto)
                                                        </MudText>
                                                    </div>
                                                }
                                            </MudItem>
                                            <MudItem xs="2" Class="d-flex align-items-center justify-content-center">
                                                <MudIconButton Icon="@Icons.Material.Filled.RemoveShoppingCart"
                                                Variant="Variant.Filled" Color="Color.Secondary" Size="Size.Small"
                                                OnClick="(() => AdicionarOuRemoverCarinho(item))" />
                                            </MudItem>
                                        </MudGrid>
                                    </MudItem>
                                </MudGrid>
                            </MudPaper>
                        }
                    }
                </div>
            </MudDrawer>
        </MudMainContent>
    </MudLayout>

    @if (_carregando)
    {
        <MudOverlay DarkBackground Visible="true" ZIndex="10">
            <MudProgressCircular Indeterminate="true" Color="Color.Default" />
        </MudOverlay>
    }
    else if (_nomePagina == "Inicio")
    {
        <AppPerfumaria.Components.Pages.Inicio.InicioCmp 
         Auth="_auth" Instalacao="_instalacao" AtualizarCarinho="AtualizarCarinho" />
    }
    else if (_nomePagina == "Marcas")
    {
        <AppPerfumaria.Components.Pages.Marcas.MarcasCmp 
         Auth="_auth" Instalacao="_instalacao" />
    }
    else if (_nomePagina == "Produtos")
    {
        <AppPerfumaria.Components.Pages.Produtos.ProdutosCmp 
         Auth="_auth" Instalacao="_instalacao" />
    }
    else if (_nomePagina == "Colaboradores")
    {
        <AppPerfumaria.Components.Pages.Colaboradores.ColaboradoresCmp 
         Auth="_auth" Instalacao="_instalacao" />
    }
    else if (_nomePagina == "Clientes")
    {
        <AppPerfumaria.Components.Pages.Clientes.ClientesCmp 
         Auth="_auth" Instalacao="_instalacao" />
    }
    else if (_nomePagina == "Vendas")
    {
        <AppPerfumaria.Components.Pages.Vendas.VendasCmp 
         Auth="_auth" Instalacao="_instalacao" AtualizarCarinho="AtualizarCarinho" Carinho="Carinho" />
    }

    <MudLayout>
        @* Barra de menu inferior *@
        <MudAppBar Bottom="true" Fixed="true" Color="Color.Inherit" Elevation="4" Style="@($"background:{Colors.Pink.Darken3};")">
            <MudButton Class="d-block" Color="Color.Inherit" OnClick="@(() => CarregarOpcaoBarraInferior("Inicio"))">
                <MudIcon Icon="@Icons.Material.Filled.Home" Size="Size.Small" />
                <MudText Typo="Typo.body1">Início</MudText>
            </MudButton>
            <MudSpacer />
            @*             <MudButton Class="d-block" Color="Color.Inherit" OnClick="@(() => CarregarOpcaoBarraInferior("Inicio"))">
                <MudIcon Icon="@Icons.Material.Filled.FavoriteBorder" Size="Size.Small" />
                <MudText Typo="Typo.body1">Favoritos</MudText>
            </MudButton> *@
            <MudSpacer />
            <MudButton Class="d-block" Color="Color.Inherit" OnClick="@(() => CarregarOpcaoBarraInferior("Vendas"))">
                <MudIcon Icon="@Icons.Material.Filled.Receipt" Size="Size.Small" />
                <MudText Typo="Typo.body1">Vendas</MudText>
            </MudButton>
            <MudSpacer />
            @*             <MudButton Class="d-block" Color="Color.Inherit" OnClick="@(() => CarregarOpcaoBarraInferior("Inicio"))">
                <MudIcon Icon="@Icons.Material.Filled.FavoriteBorder" Size="Size.Small" />
                <MudText Typo="Typo.body1">Favoritos</MudText>
            </MudButton> *@
            <MudSpacer />
            <MudButton Class="d-block" Color="Color.Inherit" OnClick="@Menu">
                <MudIcon Icon="@Icons.Material.Filled.Menu" Size="Size.Small" />
                <MudText Typo="Typo.body1">Menu</MudText>
            </MudButton>
        </MudAppBar>
        @* Aba de opções do menu inferior *@
        <MudMainContent Class="mb-0">
            <MudDrawer @bind-Open="_exibirMenu" Anchor="MudBlazor.Anchor.Bottom"
            Variant="DrawerVariant.Temporary" Color="Color.Inherit" Style="margin-bottom: 100px;" Height="100vh">
                <MudDrawerHeader>
                    <MudText Typo="Typo.h5" Class="mt-3">MENU</MudText>
                    <MudSpacer />
                    <MudIconButton Icon="@Icons.Material.Filled.KeyboardArrowDown" Size="Size.Large"
                    Color="Color.Inherit" OnClick="@Menu" />
                </MudDrawerHeader>
                <MudDivider />
                <MudNavMenu Rounded="true" Margin="Margin.Dense" Color="Color.Primary" Style="height:100vh;">
                    <MudNavLink OnClick="@(() => CarregarOpcaoMenu("Marcas"))">
                        <div class="d-flex">
                            <MudIcon Style="margin-bottom: -2px;" Size="Size.Medium" Icon="@Icons.Material.Filled.Discount" Color="Color.Surface" />
                            <MudText Style="margin-top: -2px;" Color="Color.Surface" Typo="Typo.h5" Class="ml-3">Marcas</MudText>
                        </div>
                    </MudNavLink>
                    <MudNavLink OnClick="@(() => CarregarOpcaoMenu("Produtos"))">
                        <div class="d-flex">
                            <MudIcon Style="margin-bottom: -2px;" Size="Size.Medium" Icon="@Icons.Material.Filled.ShoppingBag" Color="Color.Surface" />
                            <MudText Style="margin-top: -2px;" Color="Color.Surface" Typo="Typo.h5" Class="ml-3">Produtos</MudText>
                        </div>
                    </MudNavLink>
                    <MudNavLink OnClick="@(() => CarregarOpcaoMenu("Colaboradores"))">
                        <div class="d-flex">
                            <MudIcon Style="margin-bottom: -2px;" Size="Size.Medium" Icon="@Icons.Material.Filled.Badge" Color="Color.Surface" />
                            <MudText Style="margin-top: -2px;" Color="Color.Surface" Typo="Typo.h5" Class="ml-3">Colaboradores</MudText>
                        </div>
                    </MudNavLink>
                    <MudNavLink OnClick="@(() => CarregarOpcaoMenu("Clientes"))">
                        <div class="d-flex">
                            <MudIcon Style="margin-bottom: -2px;" Size="Size.Medium" Icon="@Icons.Material.Filled.People" Color="Color.Surface" />
                            <MudText Style="margin-top: -2px;" Color="Color.Surface" Typo="Typo.h5" Class="ml-3">Clientes</MudText>
                        </div>
                    </MudNavLink>
                    <MudNavLink OnClick="@(() => CarregarOpcaoMenu("Vendas"))">
                        <div class="d-flex">
                            <MudIcon Style="margin-bottom: -2px;" Size="Size.Medium" Icon="@Icons.Material.Filled.Receipt" Color="Color.Surface" />
                            <MudText Style="margin-top: -2px;" Color="Color.Surface" Typo="Typo.h5" Class="ml-3">Vendas</MudText>
                        </div>
                    </MudNavLink>
                    <MudNavLink Href="/etiquetas">
                        <div class="d-flex">
                            <MudIcon Style="margin-bottom: -2px;" Size="Size.Medium" Icon="@Icons.Material.Filled.Receipt" Color="Color.Surface" />
                            <MudText Style="margin-top: -2px;" Color="Color.Surface" Typo="Typo.h5" Class="ml-3">Etiquetas</MudText>
                        </div>
                    </MudNavLink>
                    @*                     <MudNavLink OnClick="@(() => CarregarOpcaoMenu(1))">
                        <div class="d-flex">
                            <MudIcon Style="margin-bottom: -2px;" Size="Size.Medium" Icon="@Icons.Material.Filled.Storefront" Color="Color.Surface" />
                            <MudText Style="margin-top: -2px;" Color="Color.Surface" Typo="Typo.h5" Class="ml-3">Instalações</MudText>
                        </div>
                    </MudNavLink> *@
                    @if (_multiplosAcessos)
                    {                     
                        <MudNavLink Class="mt-5" OnClick="AlterarAcesso">
                            <div class="d-flex">
                                <MudIcon Style="margin-bottom: -2px;" Size="Size.Medium" Icon="@Icons.Material.Filled.Autorenew" Color="Color.Surface" />
                                <MudText Style="margin-top: -2px;" Color="Color.Surface" Typo="Typo.h5" Class="ml-3">Alterar Acesso</MudText>
                            </div> 
                        </MudNavLink>
                    }
                    <MudNavLink Class="@(_multiplosAcessos ? "" : "mt-5")" OnClick="Sair">
                        <div class="d-flex">
                            <MudIcon Style="margin-bottom: -2px;" Size="Size.Medium" Icon="@Icons.Material.Filled.Logout" Color="Color.Surface" />
                            <MudText Style="margin-top: -2px;" Color="Color.Surface" Typo="Typo.h5" Class="ml-3">Sair</MudText>
                        </div>
                    </MudNavLink>
                </MudNavMenu>
            </MudDrawer>
        </MudMainContent>
    </MudLayout>
</div>

@code {
    private Auth? _auth;
    private Instalacoes? _instalacao;
    private List<Estoques>? _produtosCarinho;
    private Vendas? _venda = new Vendas();
    private bool _exibirMenu, _exibirCarinho = false;
    private bool _carregando = true;
    private bool _multiplosAcessos = false;
    private string _nomePagina = "Inicio";

    protected override async Task OnInitializedAsync()
    {
        _auth = await LocalStorage.GetItemAsync<Auth>("auth");
        _instalacao = await LocalStorage.GetItemAsync<Instalacoes>("instalacao");
        if (_auth == null)
        {
            Nav.NavigateTo("/", true);
        }
        if (_instalacao == null)
        {
            Nav.NavigateTo("/", true);
        }

        _multiplosAcessos = _auth?.data?.colaborador_user?.instalacoes_ids?.Count() > 1;
        await AtualizarCarinho();
        _carregando = false;
    }

    private void Menu()
    {
        _exibirMenu = !_exibirMenu;
    }

    private void Carinho(Vendas? venda = null)
    {
        if (venda != null)
        {
            _venda = venda;
        }

        _exibirCarinho = !_exibirCarinho;
    }

    private async Task CarregarOpcaoBarraSuperior(string nomePagina)
    {
        if (_nomePagina == nomePagina)
        {
            _carregando = true;
            StateHasChanged();
            await Task.Delay(1000);
            _carregando = false;
        }
        _nomePagina = nomePagina;
        StateHasChanged();
    }

    private async Task CarregarOpcaoBarraInferior(string nomePagina)
    {
        if (_nomePagina == nomePagina)
        {
            _carregando = true;
            StateHasChanged();
            await Task.Delay(1000);
            _carregando = false;
        }
        _nomePagina = nomePagina;
        StateHasChanged();
    }

    private async Task CarregarOpcaoMenu(string nomePagina)
    {
        _exibirMenu = !_exibirMenu;
        if (_nomePagina == nomePagina)
        {
            _carregando = true;
            StateHasChanged();
            await Task.Delay(1000);
            _carregando = false;
        }
        _nomePagina = nomePagina;
        StateHasChanged();
    }

    private double? CalcularTotalDesconto()
    {
        double? totalDesconto = 0.0;

        if (_produtosCarinho != null)
        {
            foreach (var item in _produtosCarinho)
            {
                if (item.preco_venda_desconto != null)
                {
                    totalDesconto += item.preco_venda_desconto;
                }
                else
                {
                    totalDesconto += item.preco_venda_original;
                }
            }
        }

        return totalDesconto!;
    }

    private double? CalcularPagamentoDinheiroPix()
    {
        double? totalDesconto = 0.0;
        double? totalSemDesconto = 0.0;

        if (_produtosCarinho != null)
        {
            foreach (var item in _produtosCarinho)
            {
                if (item.desconto_pagamento_avista)
                {
                    if (item.preco_venda_desconto != null)
                    {
                        totalDesconto += item.preco_venda_desconto;
                    }
                    else
                    {
                        totalDesconto += item.preco_venda_original;
                    }
                }
                else
                {
                    if (item.preco_venda_desconto != null)
                    {
                        totalSemDesconto += item.preco_venda_desconto;
                    }
                    else
                    {
                        totalSemDesconto += item.preco_venda_original;
                    }
                }
            }
        }

        return totalSemDesconto + (totalDesconto * (1 - 0.05));
    }

    public async Task CriarVenda()
    {
        try
        {
            double? precoPaga = 0.0;
            @if (_produtosCarinho?.FirstOrDefault(w => w.preco_venda_desconto != null) != null)
            {
                precoPaga = CalcularTotalDesconto();
            }
            else
            {
                precoPaga = _produtosCarinho?.Sum(w => w.preco_venda_original);
            }

            var options = new DialogOptions
                {
                    MaxWidth = MaxWidth.ExtraExtraLarge,
                    FullWidth = true,
                    BackdropClick = false,
                    CloseButton = true,
                    Position = DialogPosition.TopCenter
                };
            var param = new DialogParameters 
            { 
                ["_vendaForm"] = _venda,
                ["_precoPaga"] = precoPaga
            };
            var dialog = Dialog.Show<Pages.Vendas.Cmp.VendasFormCmp>("Finalizar Venda", param, options);
            var result = await dialog.Result;
            if (!result.Canceled && (bool)result.Data == true)
            {
                Snack.Add("Venda finalizada com sucesso!", Severity.Success);
                await CarregarOpcaoBarraInferior("Vendas");
                Carinho();
            }
            else if (!result.Canceled && (bool)result.Data == false)
            {
                Snack.Add("Tivemos um problema ao tentar finalizar a venda!", Severity.Warning);
            }
            await AtualizarCarinho();
        }
        catch (Exception e)
        {
            Snack.Add("Tivemos um problema ao tentar finalizar a venda!", Severity.Warning);
            _carregando = false;
        }
    }

    private async Task CancelarAtualizacaoVenda()
    {
        _carregando = true;
        _produtosCarinho = new List<Estoques>();
        await LocalStorage.SetItemAsync("carinho", _produtosCarinho);
        await CarregarOpcaoBarraInferior("Vendas");
        var venda = new Vendas();
        Carinho(venda);
        _carregando = false;
        StateHasChanged();
    }

    public async Task AtualizarCarinho()
    {
        _produtosCarinho = await LocalStorage.GetItemAsync<List<Estoques>>("carinho");
        if (_produtosCarinho == null)
        {
            _produtosCarinho = new List<Estoques>();
            await LocalStorage.SetItemAsync("carinho", _produtosCarinho);
        }
        StateHasChanged();
    }

    // public async Task AtualizarCarinho()
    // {
    //     _produtosCarinho = Carrinho.estoques;


    //     if (_produtosCarinho == null)
    //     {
    //         _produtosCarinho = new List<Estoques>();
    //     }
    //     StateHasChanged();
    // }

    public async Task AdicionarOuRemoverCarinho(Estoques item)
    {
        var itemProduto = _produtosCarinho.FirstOrDefault(w => w.id == item.id);

        if (itemProduto != null)
        {
            _produtosCarinho.Remove(itemProduto);
            await LocalStorage.SetItemAsync("carinho", _produtosCarinho);
            Snack.Add("Item removido do carinho!", Severity.Success);
        }
        else
        {
            Snack.Add("Tivemos um problema ao tentar remover item do carinho!", Severity.Success);
        }
        await AtualizarCarinho();
    }

    // public async Task AdicionarOuRemoverCarinho(Estoques item)
    // {
    //     var itemProduto = _produtosCarinho.FirstOrDefault(w => w.id == item.id);

    //     if (itemProduto != null)
    //     {
    //         _produtosCarinho.Remove(itemProduto);
    //         await LocalStorage.SetItemAsync("carinho", _produtosCarinho);
    //         Snack.Add("Item removido do carinho!", Severity.Success);
    //     }
    //     else
    //     {
    //         Snack.Add("Tivemos um problema ao tentar remover item do carinho!", Severity.Success);
    //     }
    //     await AtualizarCarinho();
    // }

    public async Task AlterarAcesso()
    {
        try
        {
            _carregando = true;

            await LocalStorage.RemoveItemAsync("instalacao");

            _instalacao = await LocalStorage.GetItemAsync<Instalacoes>("instalacao");
            if (_instalacao == null)
            {   
                Nav.NavigateTo("/", true);
                return;
            }

            Snack.Add("Tivemos um problema ao tentar alterar acesso!", Severity.Warning);
            _carregando = false;
        }
        catch (Exception e)
        {
            Snack.Add("Tivemos um problema ao tentar alterar acesso!", Severity.Warning);
            _carregando = false;
        }
    }

    public async Task Sair()
    {
        try
        {
            _carregando = true;

            var reinoCompany = new ReinoCompany();
            var response = await reinoCompany.Deslogar(_auth!.token!);

            if (response!.status ||
            !response.status && response.message == "Token de autenticação inválido.")
            {
                await LocalStorage.RemoveItemAsync("auth");
                await LocalStorage.RemoveItemAsync("instalacao");
                Nav.NavigateTo("/", true);
            }
            else
            {
                if (!string.IsNullOrEmpty(response.message))
                {
                    Snack.Add(response.message, Severity.Warning);
                }
                _carregando = false;
            }
        }
        catch (Exception e)
        {
            Snack.Add("Tivemos um problema ao tentar deslogar!", Severity.Warning);
            _carregando = false;
        }
    }
}