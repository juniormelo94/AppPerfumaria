@using AppPerfumaria.Api.ReinoCompany
@using AppPerfumaria.Components.CmpsGerais
@using AppPerfumaria.Components.Pages.Marcas.Cmp
@using AppPerfumaria.Models.Auth
@using System.Text.Json.Serialization
@using AppPerfumaria.Models.Collections
@using AppPerfumaria.Models.Pagination
@using AppPerfumaria.Models.Tables

@inject IDialogService Dialog
@inject ISnackbar Snack

<MudOverlay DarkBackground Visible="_carregando" ZIndex="10">
    <MudProgressCircular Indeterminate="true" Color="Color.Default" />
</MudOverlay>

<MudPaper Class="px-2 w-100" Elevation="4" Style="position:fixed; z-index: 9;">
    <!-- Barra de pesquisa e botão filtro -->
    <div class="d-flex">
        <MudTextField Value="_pesquisarFiltro" Label="Pesquisar" Variant="Variant.Outlined"
                      Adornment="Adornment.End" Margin="Margin.Dense" Immediate="true" 
                      ValueChanged="(async (string v) => { _pesquisarFiltro = v; await Pesquisar(v); })"
                      AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Inherit" 
                      ClearIcon="@Icons.Material.Filled.Clear" Clearable="true" />
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.FilterList" OnClick="Filtro"
                        Color="Color.Inherit" Size="Size.Medium" />
    </div>
    <!-- Barra de filtros -->
    <MudPopover Open="@_exibirFiltro" Fixed="true" Class="px-4 pt-4 w-100" 
                AnchorOrigin="Origin.TopRight" TransformOrigin="Origin.TopRight" >
        <MudGrid Spacing="2" Justify="Justify.Center" Class="mb-1">
            <MudItem xs="6">
                <MudSelect @bind-Value="_porPagina" Variant="Variant.Outlined"
                            Label="Carregar De" Margin="Margin.Dense">
                    <MudSelectItem Value="@("10")" />
                    <MudSelectItem Value="@("15")" />
                    <MudSelectItem Value="@("20")" />
                </MudSelect>
            </MudItem>
            <MudItem xs="6">
                <MudSelect T="string" @bind-Value="_statusFiltro" Variant="Variant.Outlined"
                            Label="Status" Margin="Margin.Dense">
                    <MudSelectItem Value="@("Todos")" />
                    <MudSelectItem Value="@("Ativo")" />
                    <MudSelectItem Value="@("Inativo")" />
                </MudSelect>
            </MudItem>
            <MudItem xs="12">
                <MudDateRangePicker Label="Data de Criação" @bind-DateRange="_dataCriacaoFiltro" 
                                    Variant="Variant.Outlined"
                                    PlaceholderStart="Data Início"
                                    PlaceholderEnd="Data Fim" Clearable="true"
                                    DateFormat="dd/MM/yyyy"
                                    Margin="Margin.Dense" />
            </MudItem>
        </MudGrid>
        <MudDivider />
        <div class="d-flex my-2 float-end">
            <MudFab Label="Fechar" Size="Size.Small" 
                    OnClick="Filtro" Class="mr-2" />
            <MudFab Label="Filtrar" Size="Size.Small" 
                    OnClick="AplicarFiltros" />
        </div>
    </MudPopover>
    <!-- Barra de card e botão criar -->
    <div class="d-flex">
        <MudTabs Elevation="4" Rounded="true" Centered="true" @ref="tabs">
            <MudTabPanel Icon="@Icons.Material.Filled.Storefront" Text="Marcas" 
                         OnClick="LimparEListarInstalacaoMarcas" />
            <MudTabPanel Text="Marcas" OnClick="LimparEListarMarcas" />
        </MudTabs>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="CriarMarca"
                       Color="Color.Inherit" Size="Size.Medium" />
    </div>
</MudPaper>

<div class="pa-2" style="margin-top: 100px;">
    @if (_indiceMenuMarca == 0)
    {
        <!-- Listar resultados das marcas associadas -->
        <MudGrid Spacing="2" Justify="Justify.Center">
            @if (_listarInstalacoesMarcas != null && _listarInstalacoesMarcas.Count() > 0)
            {
                @foreach (var instalacaoMarca in _listarInstalacoesMarcas)
                {
                    <MudItem xs="6">
                        <MudCard Style="height: 350px;" @onclick="(() => VisualizarInstalacaoMarca(instalacaoMarca))">
                            <MudIcon Style="position:absolute;" Class="mt-2 ml-2" Color="@(instalacaoMarca.status == "Ativo" ? Color.Dark : Color.Default)"
                                     Icon="@(instalacaoMarca.status == "Ativo" ? Icons.Material.Filled.ThumbUp : @Icons.Material.Filled.ThumbDown)" />
                            <MudCardMedia Image="@($"data:image/png;base64,{instalacaoMarca!.marca.logo_img}")" Height="200" />
                            <MudCardContent Class="py-2">
                                <MudText Class="fw-bold" Typo="Typo.body1">
                                    @if (instalacaoMarca.marca.nome.Length > 35)
                                    {
                                        @($"{instalacaoMarca.marca.nome.Substring(0, 35).ToUpper()}...")
                                    }
                                    else
                                    {
                                        @instalacaoMarca.marca.nome.ToUpper()
                                    }
                                </MudText>
                            </MudCardContent>
                            <MudCardActions Class="d-block py-0 pb-1">
                                <div class="d-flex mt-1 px-3">
                                    <MudIconButton Size="Size.Medium" OnClick="(() => AtualizarInstalacaoMarca(instalacaoMarca))"
                                                   Icon="@Icons.Material.Filled.Edit" />
                                    <MudSpacer />
                                    <MudIconButton Size="Size.Medium" OnClick="(() => DeletarInstalacaoMarca(instalacaoMarca))"
                                                   Icon="@Icons.Material.Filled.Delete" />
                                </div>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                }

                <MudItem Class="py-5" xs="12">
                    @if (_paginacaoInstalacoesMarcas!.current_page != _paginacaoInstalacoesMarcas!.last_page)
                    {
                            <MudFab Class="w-100" Label="Carregar Mais" OnClick="CarregarMais"
                                    Disabled="false" Size="Size.Small" />
                    }

                    <MudText Align="Align.Center" Typo="Typo.body2" Class="mt-2 w-100">
                        @($"Total: {_paginacaoInstalacoesMarcas!.total} | Exibidos: {_paginacaoInstalacoesMarcas!.to}")
                    </MudText>
                </MudItem>
            }
            else
            {
                @if (!_carregando)
                {
                    <MudItem Class="py-5" xs="12">
                        <Animate class="w-100" Animation="Animations.FadeDown" Duration="TimeSpan.FromSeconds(0.5)" Delay="TimeSpan.FromSeconds(0.4)">
                            <MudText Class="mt-5" Align="Align.Center" Typo="Typo.body1">Nenhum resultado foi encontrado!</MudText>
                        </Animate>
                    </MudItem>
                }
            }
        </MudGrid>
    }
    else if (_indiceMenuMarca == 1)
    {
        <!-- Listar resultados das marcas -->
        <MudGrid Spacing="2" Justify="Justify.Center">
            @if (_listarMarcas != null && _listarMarcas.Count() > 0)
            {
                @foreach (var marca in _listarMarcas)
                {
                    <MudItem xs="6">
                        <MudCard Style="height: 380px;" @onclick="(() => VisualizarMarca(marca))">
                            <MudIcon Style="position:absolute;" Class="mt-2 ml-2" Color="@(marca.status == "Ativo" ? Color.Dark : Color.Default)"
                                     Icon="@(marca.status == "Ativo" ? Icons.Material.Filled.ThumbUp : Icons.Material.Filled.ThumbDown)" />
                            <MudCardMedia Image="@($"data:image/png;base64,{marca.logo_img}")" Height="200" />
                            <MudCardContent Class="py-2">
                                <MudText Class="fw-bold" Typo="Typo.body1">
                                    @if (marca.nome.Length > 35)
                                    {
                                        @($"{marca.nome.Substring(0, 35).ToUpper()}...")
                                    }
                                    else
                                    {
                                        @marca.nome.ToUpper()
                                    }
                                </MudText>
                            </MudCardContent>
                            <MudCardActions Class="d-block py-0 pb-1">
                                @if (marca!.instalacao_marcas!.Count() > 0)
                                {
                                    <MudFab Class="w-100" Label="Associado" StartIcon="@Icons.Material.Filled.Check"
                                            Size="Size.Small" Disabled="true" />
                                }
                                else
                                {
                                    <MudFab Class="w-100" Label="Associar" Size="Size.Small" 
                                            OnClick="(() => CriarInstalacaoMarca(marca))" />
                                }
                                <div class="d-flex mt-1 px-3">
                                    <MudIconButton Size="Size.Medium" OnClick="(() => AtualizarMarca(marca))"
                                                   Icon="@Icons.Material.Filled.Edit" />
                                    <MudSpacer />
                                    <MudIconButton Size="Size.Medium" OnClick="(() => DeletarMarca(marca))"
                                                   Icon="@Icons.Material.Filled.Delete" />
                                </div>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                }

                <MudItem Class="py-5" xs="12">
                    @if (_paginacaoMarcas!.current_page != _paginacaoMarcas!.last_page)
                    {
                        <MudFab Class="w-100" Label="Carregar Mais" OnClick="CarregarMais"
                                Disabled="false" Size="Size.Small" />
                    }

                    <MudText Align="Align.Center" Typo="Typo.body2" Class="mt-2 w-100">
                        @($"Total: {_paginacaoMarcas!.total} | Exibidos: {_paginacaoMarcas!.to}")
                    </MudText>
                </MudItem>
            }
            else
            {
                @if (!_carregando)
                {
                    <MudItem Class="py-5" xs="12">
                        <Animate class="w-100" Animation="Animations.FadeDown" Duration="TimeSpan.FromSeconds(0.5)" Delay="TimeSpan.FromSeconds(0.4)">
                            <MudText Class="mt-5" Align="Align.Center" Typo="Typo.body1">Nenhum resultado foi encontrado!</MudText>
                        </Animate>
                    </MudItem>
                }
            }
        </MudGrid>
    }
</div>

@code {
    [Parameter] public Auth? Auth { get; set; }
    [Parameter] public Instalacoes? Instalacao { get; set; }
    private List<Marcas>? _listarMarcas = new List<Marcas>();
    private List<InstalacoesMarcas>? _listarInstalacoesMarcas = new List<InstalacoesMarcas>();
    private MetaPagination? _paginacaoMarcas;
    private MetaPagination? _paginacaoInstalacoesMarcas;
    private MudTabs? tabs;
    private int _indiceMenuMarca = 0;
    private bool _carregando = true;
    private bool _exibirFiltro = false;
    private string? _pesquisarFiltro;
    private string? _statusFiltro = "Todos";
    private DateRange _dataCriacaoFiltro = new DateRange();
    private string _porPagina = "10";
    private int _paginaPaginacao = 1;

    protected override async Task OnInitializedAsync()
    {
        do
        {
            await Task.Delay(300);
        }
        while (Auth == null || Instalacao == null);

        await ListarInstalacaoMarcas();
    }

    private async Task Pesquisar(string pesquisar)
    {
        await Task.Delay(1500);

        if (pesquisar == _pesquisarFiltro)
        {
            await AplicarFiltros();
        }
    }

    public async Task CarregarMais()
    {
        if (_indiceMenuMarca == 0)
        {
            _paginaPaginacao++;
            await ListarInstalacaoMarcas();
        }
        else
        {
            _paginaPaginacao++;
            await ListarMarcas();
        }
    }

    private void Filtro()
    {
        _exibirFiltro = !_exibirFiltro;
    }

    public string? PegarFiltros()
    {
        string filtros = $"?instalacoes_id={Instalacao!.id}&page={_paginaPaginacao}&por_pagina={_porPagina}";

        if (!string.IsNullOrEmpty(_pesquisarFiltro))
        {
            filtros += $"&pesquisar={_pesquisarFiltro}";
        }
        if (!string.IsNullOrEmpty(_statusFiltro) && _statusFiltro != "Todos")
        {
            filtros += $"&status={_statusFiltro}";
        }
        if (_dataCriacaoFiltro.Start != null && _dataCriacaoFiltro.End != null)
        {
            filtros += $"&criado_de={_dataCriacaoFiltro.Start?.ToString("yyyy-MM-dd")}&criado_ate={_dataCriacaoFiltro.End?.ToString("yyyy-MM-dd")}";
        }

        return filtros;
    }

    public async Task AplicarFiltros()
    {
        _exibirFiltro = false;

        if (_indiceMenuMarca == 0)
        {
            await LimparEListarInstalacaoMarcas();
        }
        else
        {
            await LimparEListarMarcas();
        }
    }

    public async Task LimparEListarInstalacaoMarcas()
    {
        _paginaPaginacao = 1;
        _listarInstalacoesMarcas = new List<InstalacoesMarcas>();
        await ListarInstalacaoMarcas();
    }

    public async Task ListarInstalacaoMarcas()
    {
        try
        {
            _carregando = true;
            StateHasChanged();
            string? filtros = PegarFiltros();

            var reinoCompany = new ReinoCompany();
            var response = await reinoCompany.InstalacoesMarcasListar(Auth!.token!, filtros);

            if (response!.status)
            {
                _paginacaoInstalacoesMarcas = response.meta;
                _listarInstalacoesMarcas!.AddRange(response!.data!);
            }
            else
            {
                if (!string.IsNullOrEmpty(response.message))
                {
                    Snack.Add(response.message, Severity.Warning);
                }
            }

            _indiceMenuMarca = 0;
            _carregando = false;
            StateHasChanged();
        }
        catch (Exception e)
        {
            Snack.Add("Tivemos um problema ao tentar listar as marcas dessa instalação!", Severity.Warning);
            _carregando = false;
        }
    }

    public async Task LimparEListarMarcas()
    {
        _paginaPaginacao = 1;
        _listarMarcas = new List<Marcas>();
        await ListarMarcas();
    }

    public async Task ListarMarcas()
    {
        try
        {
            _carregando = true;
            StateHasChanged();
            string? filtros = PegarFiltros();

            var reinoCompany = new ReinoCompany();
            var response = await reinoCompany.MarcasListar(Auth!.token!, filtros);

            if (response!.status)
            {
                _paginacaoMarcas = response.meta;
                _listarMarcas!.AddRange(response!.data!);
            }
            else
            {
                if (!string.IsNullOrEmpty(response.message))
                {
                    Snack.Add(response.message, Severity.Warning);
                }
            }

            _indiceMenuMarca = 1;
            _carregando = false;
            StateHasChanged();
        }
        catch (Exception e)
        {
            Snack.Add("Tivemos um problema ao tentar listar as marcas!", Severity.Warning);
            _carregando = false;
        }
    }

    private void VisualizarInstalacaoMarca(InstalacoesMarcas instalacaoMarca)
    {
        try
        {
            var options = new DialogOptions
                {
                    MaxWidth = MaxWidth.ExtraExtraLarge,
                    FullWidth = true,
                    FullScreen = true,
                    CloseButton = false,
                };
            var param = new DialogParameters { ["_instalacaoMarca"] = instalacaoMarca };
            Dialog.Show<VisualizarInstalacaoMarcaCmp>("Visualizar Associação", param, options);
        }
        catch (Exception e)
        {
            Snack.Add("Tivemos um problema ao tentar exibir a marca associada!", Severity.Warning);
        }
    }

    private void VisualizarMarca(Marcas marca)
    {
        try
        {
            var options = new DialogOptions
                {
                    MaxWidth = MaxWidth.ExtraExtraLarge,
                    FullWidth = true,
                    FullScreen = true,
                    CloseButton = false,
                };
            var param = new DialogParameters { ["_marca"] = marca };
            Dialog.Show<VisualizarMarcaCmp>("Visualizar Marca", param, options);
        }
        catch (Exception e)
        {
            Snack.Add("Tivemos um problema ao tentar exibir a marca!", Severity.Warning);
        }
    }

    public async Task CriarInstalacaoMarca(Marcas marca)
    {
        try
        {
            if (marca.status == "Inativo")
            {
                Snack.Add("Tivemos um problema ao tentar associar, pois a marca está inativa!", Severity.Warning);
                return;
            }

            var param = new DialogParameters<AlertaAssociacao>
            {
                { x => x.ContentText, "Deseja associar essa <b>MARCA</b> a instalação?" }
            };
            var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
            var dialog = Dialog.Show<AlertaAssociacao>("Associar Marca", param, options);
            var result = await dialog.Result;
            if (!result.Canceled)
            {
                _carregando = true;

                var instalacaoMarca = new InstalacoesMarcas
                    {
                        instalacoes_id = Instalacao!.id,
                        marcas_id = marca.id,
                        status = "Ativo",
                    };
                var reinoCompany = new ReinoCompany();
                var response = await reinoCompany.InstalacoesMarcasCriar(Auth!.token!, instalacaoMarca);

                if (response!.status)
                {
                    Snack.Add("Marca associada com sucesso!", Severity.Success);
                    await LimparEListarMarcas();
                }
                else
                {
                    if (!string.IsNullOrEmpty(response.message))
                    {
                        Snack.Add(response.message, Severity.Warning);
                    }
                    _carregando = false;
                }
            }
        }
        catch (Exception e)
        {
            Snack.Add("Tivemos um problema ao tentar associar a marca!", Severity.Warning);
            _carregando = false;
        }
    }

    public async Task CriarMarca()
    {
        try
        {
            var options = new DialogOptions { 
                    MaxWidth = MaxWidth.ExtraExtraLarge, 
                    FullWidth = true, 
                    BackdropClick = false, 
                    CloseButton = true, 
                    Position = DialogPosition.TopCenter 
            };
            var param = new DialogParameters { ["_marcaForm"] = new Marcas() };
            var dialog = Dialog.Show<MarcasFormCmp>("Adicionar Marca", param, options);
            var result = await dialog.Result;
            if (!result.Canceled && (bool)result.Data == true)
            {
                Snack.Add("Marca criada com sucesso!", Severity.Success);
                tabs.ActivatePanel(1);
            }
            else if (!result.Canceled && (bool)result.Data == false)
            {
                Snack.Add("Tivemos um problema ao tentar criar a marca!", Severity.Warning);
            }
        }
        catch (Exception e)
        {
            Snack.Add("Tivemos um problema ao tentar criar a marca!", Severity.Warning);
            _carregando = false;
        }
    }

    public async Task AtualizarInstalacaoMarca(InstalacoesMarcas instalacaoMarca)
    {
        try
        {
            var options = new DialogOptions
                {
                    MaxWidth = MaxWidth.ExtraExtraLarge,
                    FullWidth = true,
                    BackdropClick = false,
                    CloseButton = true,
                    Position = DialogPosition.TopCenter
                };
            var param = new DialogParameters { ["_instalacaoMarcaForm"] = instalacaoMarca.Clone() };
            var dialog = Dialog.Show<InstalacoesMarcasFormCmp>("Atualizar Associação", param, options);
            var result = await dialog.Result;
            if (!result.Canceled && (bool)result.Data == true)
            {
                Snack.Add("Marca associada atualizada com sucesso!", Severity.Success);
                await LimparEListarInstalacaoMarcas();
            }
            else if (!result.Canceled && (bool)result.Data == false)
            {
                Snack.Add("Tivemos um problema ao tentar atualizar associação da marca!", Severity.Warning);
            }
        }
        catch (Exception e)
        {
            Snack.Add("Tivemos um problema ao tentar atualizar associação da marca!", Severity.Warning);
            _carregando = false;
        }
    }

    public async Task AtualizarMarca(Marcas marca)
    {
        try
        {
            var options = new DialogOptions
                {
                    MaxWidth = MaxWidth.ExtraExtraLarge,
                    FullWidth = true,
                    BackdropClick = false,
                    CloseButton = true,
                    Position = DialogPosition.TopCenter
                };
            var param = new DialogParameters { ["_marcaForm"] = marca.Clone() };
            var dialog = Dialog.Show<MarcasFormCmp>("Atualizar Marca", param, options);
            var result = await dialog.Result;
            if (!result.Canceled && (bool)result.Data == true)
            {
                Snack.Add("Marca atualizada com sucesso!", Severity.Success);
                await LimparEListarMarcas();
            }
            else if (!result.Canceled && (bool)result.Data == false)
            {
                Snack.Add("Tivemos um problema ao tentar atualizar a marca!", Severity.Warning);
            }
        }
        catch (Exception e)
        {
            Snack.Add("Tivemos um problema ao tentar atualizar a marca!", Severity.Warning);
            _carregando = false;
        }
    }

    public async Task DeletarInstalacaoMarca(InstalacoesMarcas instalacaoMarca)
    {
        try
        {
            var param = new DialogParameters<AlertaDelete>
            {
                { x => x.ContentText, "Tem certeza que deseja deletar essa <b>ASSOCIAÇÃO</b> a <b>MARCA</b> e todos os dados a ela ligados?" }
            };
            var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
            var dialog = Dialog.Show<AlertaDelete>("Deletar Associação", param, options);
            var result = await dialog.Result;
            if (!result.Canceled)
            {
                _carregando = true;
                var reinoCompany = new ReinoCompany();
                var response = await reinoCompany.InstalacoesMarcasDeletar(Auth!.token!, instalacaoMarca);

                if (response!.status)
                {
                    Snack.Add("Marca associada deletada com sucesso!", Severity.Success);
                    await LimparEListarInstalacaoMarcas();
                }
                else
                {
                    if (!string.IsNullOrEmpty(response.message))
                    {
                        Snack.Add(response.message, Severity.Warning);
                    }
                    _carregando = false;
                }
            }
        }
        catch (Exception e)
        {
            Snack.Add("Tivemos um problema ao tentar deletar associação a marca!", Severity.Warning);
            _carregando = false;
        }
    }

    public async Task DeletarMarca(Marcas marca)
    {
        try
        {
            var param = new DialogParameters<AlertaDelete>
            {
                { x => x.ContentText, "Tem certeza que deseja deletar essa <b>MARCA</b> e todos os dados a ela ligados?" }
            };
            var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
            var dialog = Dialog.Show<AlertaDelete>("Deletar Marca", param, options);
            var result = await dialog.Result;
            if (!result.Canceled)
            {
                _carregando = true;
                var reinoCompany = new ReinoCompany();
                var response = await reinoCompany.MarcasDeletar(Auth!.token!, marca);

                if (response!.status)
                {
                    Snack.Add("Marca deletada com sucesso!", Severity.Success);
                    await LimparEListarMarcas();
                }
                else
                {
                    if (!string.IsNullOrEmpty(response.message))
                    {
                        Snack.Add(response.message, Severity.Warning);
                    }
                    _carregando = false;
                }
            }
        }
        catch (Exception e)
        {
            Snack.Add("Tivemos um problema ao tentar deletar a marca!", Severity.Warning);
            _carregando = false;
        }
    }
}
