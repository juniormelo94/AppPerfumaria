@using AppPerfumaria.Api.ReinoCompany
@using AppPerfumaria.Components.CmpsGerais
@using AppPerfumaria.Components.Pages.Inicio.Cmp
@using AppPerfumaria.Models.Auth
@using System.Text.Json.Serialization
@using AppPerfumaria.Models.Collections
@using AppPerfumaria.Models.Pagination
@using AppPerfumaria.Models.Tables
@using ZXing.Net.Maui

@inject IDialogService Dialog
@inject ISnackbar Snack

<MudOverlay DarkBackground Visible="_carregando" ZIndex="10">
    <MudProgressCircular Indeterminate="true" Color="Color.Default" />
</MudOverlay>

<MudPaper Class="px-2 w-100" Elevation="4" Style="position:fixed; z-index: 9;">
    <!-- Barra de leitor -->
    <div class="d-flex">
        <MudTextField Value="_leitorFiltro" Label="Código Barras ou QR Code" Variant="Variant.Outlined"
                      Adornment="Adornment.End" Margin="Margin.Dense" Immediate="true"
                      ValueChanged="(async (string v) => { _leitorFiltro = v; await Leitor(v); })"
                      AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Inherit"
                      ClearIcon="@Icons.Material.Filled.Clear" Clearable="true" />
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.QrCodeScanner" OnClick="AbrirScanner"
                       Color="Color.Inherit" Size="Size.Medium" />
    </div>
    <!-- Barra de pesquisa e botão filtro -->
    <div class="d-flex">
        <MudTextField Value="_pesquisarFiltro" Label="Pesquisar" Variant="Variant.Outlined"
                      Adornment="Adornment.End" Margin="Margin.Dense" Immediate="true"
                      ValueChanged="(async (string v) => { _pesquisarFiltro = v; await Pesquisar(v); })"
                      AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Inherit" 
                      ClearIcon="@Icons.Material.Filled.Clear" Clearable="true" />
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.FilterList" OnClick="Filtro"
                       Color="Color.Inherit" Size="Size.Medium" />
    </div>
    <!-- Barra de filtros -->
    <MudPopover Open="@_exibirFiltro" Fixed="true" Class="px-4 pt-4 w-100"
                AnchorOrigin="Origin.TopRight" TransformOrigin="Origin.TopRight">
        <MudGrid Spacing="2" Justify="Justify.Center" Class="mb-1">
            <MudItem xs="6">
                <MudSelect @bind-Value="_porPagina" Variant="Variant.Outlined"
                           Label="Carregar De" Margin="Margin.Dense">
                    <MudSelectItem Value="@("10")" />
                    <MudSelectItem Value="@("15")" />
                    <MudSelectItem Value="@("20")" />
                </MudSelect>
            </MudItem>
            <MudItem xs="6">
                <MudSelect T="string" @bind-Value="_statusFiltro" Variant="Variant.Outlined"
                           Label="Status" Margin="Margin.Dense">
                    <MudSelectItem Value="@("Todos")" />
                    <MudSelectItem Value="@("Ativo")" />
                    <MudSelectItem Value="@("Inativo")" />
                </MudSelect>
            </MudItem>
        </MudGrid>
        <MudDivider />
        <div class="d-flex my-2 float-end">
            <MudFab Label="Fechar" Size="Size.Small"
                    OnClick="Filtro" Class="mr-2" />
            <MudFab Label="Filtrar" Size="Size.Small"
                    OnClick="AplicarFiltros" />
        </div>
    </MudPopover>
</MudPaper>

<div class="pa-2" style="margin-top: 110px;">
    <!-- Listar resultados dos produtos associados -->
    <MudGrid Spacing="2" Justify="Justify.Center">
        @if (_listarCombos != null && _listarCombos.Count() > 0)
        {
            @foreach (var combo in _listarCombos)
            {
                <MudItem xs="6" sm="6" md="4" lg="3" xl="3" xxl="2">
                    <MudCard Style="@(combo!.combo_produtos!.Any(a => a.produto?.estoque == null) ? "height:350px; opacity:0.3;" : "height:350px;")" @onclick="(() => VisualizarCombo(combo))">
                        @if (combo!.combo_produtos!.Any(a => a.produto?.estoque != null && a.produto?.estoque?.preco_venda_desconto > 0))
                        {
                            <div style="@($"background:{Colors.Pink.Darken3}; position:absolute; font-size:12px;")" 
                                 class="rounded mt-2 ml-2 pa-1 fw-bold text-white">
                                -@PorcentagemDesconto(combo!)?.ToString("F1")%
                            </div>
                        }
                        <MudCardMedia Image="@($"data:image/png;base64,{combo!.img_1}")" Style="width:100%; height:100%;" />
                        <MudCardContent Class="py-2">
                            <MudText Class="fw-bold" Typo="Typo.body1">
                                @combo.nome.ToUpper()
                            </MudText>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            }

            <MudItem Class="py-5" xs="12">
                @if (_paginacaoCombos!.current_page != _paginacaoCombos!.last_page)
                {
                    <MudFab Class="w-100" Label="Carregar Mais" OnClick="CarregarMais"
                            Disabled="false" Size="Size.Small" />
                }

                <MudText Align="Align.Center" Typo="Typo.body2" Class="mt-2 w-100">
                    @($"Total: {_paginacaoCombos!.total} | Exibidos: {_paginacaoCombos!.to}")
                </MudText>
            </MudItem>
        }
        else
        {
            @if(!_carregando)
            {
                <MudItem Class="py-5" xs="12">
                    <Animate class="w-100" Animation="Animations.FadeDown" Duration="TimeSpan.FromSeconds(0.5)" Delay="TimeSpan.FromSeconds(0.4)">
                        <MudText Class="mt-5" Align="Align.Center" Typo="Typo.body1">Nenhum resultado foi encontrado!</MudText>
                    </Animate>
                </MudItem>
            }
        }
    </MudGrid>
</div>

@code {
    [Parameter] public Auth? Auth { get; set; }
    [Parameter] public Instalacoes? Instalacao { get; set; }
    [Parameter] public EventCallback AtualizarCarinho { get; set; }
    private List<Combos>? _listarCombos = new List<Combos>();
    private MetaPagination? _paginacaoCombos;
    private bool _carregando = true;
    private bool _exibirFiltro = false;
    private string? _pesquisarFiltro;
    private string? _leitorFiltro;
    private string? _statusFiltro = "Todos";
    private DateRange _dataCriacaoFiltro = new DateRange();
    private string _porPagina = "10";
    private int _paginaPaginacao = 1;

    protected override async Task OnInitializedAsync()
    {
        do
        {
            await Task.Delay(300);
        }
        while (Auth == null || Instalacao == null);

        await ListarCombos();
    }

    private double? PorcentagemDesconto(Combos combo)
    {
        double? porcentagem_desconto = 0.0;
        double? preco_venda = combo!.combo_produtos!.Sum(s => s.produto?.estoque?.preco_venda_original);

        double? preco_venda_desconto = 0.0;
        if (combo!.combo_produtos!.Any(a => a.produto?.estoque != null && a.produto?.estoque?.preco_venda_desconto > 0))
        {
            preco_venda_desconto = combo!.combo_produtos!.Where(s => s.produto?.estoque?.preco_venda_desconto > 0)
                                                         .Sum(s => s.produto?.estoque?.preco_venda_desconto);

            porcentagem_desconto = (((preco_venda / preco_venda_desconto) - 1) * 100);
        }

        return porcentagem_desconto;
    }

    private async Task Pesquisar(string pesquisar)
    {
        await Task.Delay(1500);

        if (pesquisar == _pesquisarFiltro)
        {
            await AplicarFiltros();
        }
    }

    private async Task Leitor(string leitor)
    {
        await Task.Delay(1500);

        if (leitor == _leitorFiltro)
        {
            await AplicarFiltros();
        }
    }

    public async Task AbrirScanner()
    {
        var resultados = await BuscarResultadoScan();
        var barcode = resultados.FirstOrDefault();
        if (barcode != null)
        {  
            _leitorFiltro = barcode.Value;
            await AplicarFiltros();
        }
    }

    public async Task<BarcodeResult[]> BuscarResultadoScan()
    {
        var cameraPage = new CameraPage();
        await Application.Current!.MainPage!.Navigation.PushModalAsync(cameraPage);

        return await cameraPage.WaitForResultAsync();
    }

    public async Task CarregarMais()
    {
        _paginaPaginacao++;
        await ListarCombos();
    }

    private void Filtro()
    {
        _exibirFiltro = !_exibirFiltro;
    }

    public string? PegarFiltros()
    {
        string filtros = $"?instalacoes_id={Instalacao!.id}&vendido=0&page={_paginaPaginacao}&por_pagina={_porPagina}";

        if (!string.IsNullOrEmpty(_pesquisarFiltro))
        {
            filtros += $"&pesquisar={_pesquisarFiltro}";
        }
        if (!string.IsNullOrEmpty(_leitorFiltro))
        {
            filtros += $"&leitor={_leitorFiltro}";
        }
        if (!string.IsNullOrEmpty(_statusFiltro) && _statusFiltro != "Todos")
        {
            filtros += $"&status={_statusFiltro}";
        }
        if (_dataCriacaoFiltro.Start != null && _dataCriacaoFiltro.End != null)
        {
            filtros += $"&criado_de={_dataCriacaoFiltro.Start?.ToString("yyyy-MM-dd")}&criado_ate={_dataCriacaoFiltro.End?.ToString("yyyy-MM-dd")}";
        }

        return filtros;
    }

    public async Task AplicarFiltros()
    {
        _exibirFiltro = false;
        await LimparEListarCombos();
    }

    public async Task LimparEListarCombos()
    {
        _paginaPaginacao = 1;
        _listarCombos = new List<Combos>();
        await ListarCombos();
    }

    public async Task ListarCombos()
    {
        try
        {
            _carregando = true;
            StateHasChanged();
            string? filtros = PegarFiltros();

            var reinoCompany = new ReinoCompany();
            var response = await reinoCompany.CombosListar(Auth!.token!, filtros);

            if (response!.status)
            {
                _paginacaoCombos = response.meta;
                _listarCombos!.AddRange(response!.data!);
            }
            else
            {
                if (!string.IsNullOrEmpty(response.message))
                {
                    Snack.Add(response.message, Severity.Warning);
                }
            }

            _carregando = false;
            StateHasChanged();
        }
        catch (Exception e)
        {
            Snack.Add("Tivemos um problema ao tentar listar os combos!", Severity.Warning);
            _carregando = false;
        }
    }

    private async Task VisualizarCombo(Combos combo)
    {
        try
        {
            var options = new DialogOptions
                {
                    MaxWidth = MaxWidth.ExtraExtraLarge,
                    FullWidth = true,
                    FullScreen = true,
                    CloseButton = false,
                };
            var param = new DialogParameters { 
                ["_combo"] = combo,
                ["AtualizarCarinho"] = AtualizarCarinho
            };
            Dialog.Show<VisualizarComboCmp>("Visualizar Combo", param, options);
        }
        catch (Exception e)
        {
            Snack.Add("Tivemos um problema ao tentar exibir o combo!", Severity.Warning);
        }
    }
}